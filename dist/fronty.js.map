{"version":3,"sources":["../src/fronty.js"],"names":["Component","renderer","htmlNodeId","childTags","stopped","eventListeners","childComponents","childComponentIds","_boundEventsListener","_eventsListener","bind","_previousVirtualDOM","_nodesWithFrontyComponentAttribute","_parsingService","_defaultParsingService","_resetVirtualDOM","component","push","getHtmlNodeId","stop","start","className","element","id","constructorFunction","eval","Function","index","indexOf","splice","render","rendering","_getComponentNode","beforeRender","savedChildNodes","_saveChildNodes","htmlContents","_getDOMFromRendererOutput","newTree","_renderNewTree","_restoreChildNodes","_updateEventListeners","_createChildComponents","afterRender","i","length","child","onStop","onStart","eventType","nodesQuery","callback","query","rootNode","removeEventListener","addEventListener","firstRender","currentTree","firstChild","removeChild","nodeType","Node","ELEMENT_NODE","setAttribute","patches","TreeComparator","diff","node1","node2","COMPARE_POLICY_REPLACE","COMPARE_POLICY_SKIP","COMPARE_POLICY_DIFF","applyPatches","patch","Object","assign","toReplace","_resolveRealNode","mode","PATCH_INSERT_NODE","PATCH_APPEND_CHILD","PATCH_REPLACE_NODE","replacement","_cloneAndIndex","PATCH_SWAP_NODES","document","createElement","appendChild","trim","correctedHtmlContents","match","parse","node","childNodes","innerHTML","undefined","getElementById","result","realNode","childComponent","childId","_getChildNode","currentComponentNode","parentNode","replaceChild","root","clone","cloneNode","hasAttribute","childComponentsByClassName","_createTagBasedChildComponents","_createAttributeBasedChildComponents","_childrenGC","bufferedParsingService","BufferedParsingService","childTag","childTagElements","Array","from","getElementsByTagName","childTagElement","itemId","getAttribute","getChildComponent","_createAndAddChildComponent","finish","j","nodeId","keys","componentIdsInTag","removeChildComponent","parsingService","createChildComponent","setHtmlNodeId","prevParsingService","addChildComponent","event","listener","target","matches","type","preventDefault","ParsingService","elem","currentHTML","counter","callbacks","parsedTree","html","currentCounter","comparePolicy","actionToDo","tagName","_compareChildren","TEXT_NODE","COMMENT_NODE","nodeValue","PATCH_SET_NODE_VALUE","_equalAttributes","PATCH_SET_ATTRIBUTES","child1pos","child2pos","insertions","deletions","node1ChildNodes","node1Keys","_buildChildrenKeyIndex","node2Keys","child1","child2","key1","key2","pos","temp","beforePos","PATCH_REMOVE_NODE","apply","partial","arr","indexA","indexB","childpos","key","attributes","name","value","obj1","obj2","insertBefore","patchMapping","attribute","checked","removeAttribute","_swapElements","Model","observers","update","hint","notifyObservers","observer","ModelComponent","modelRenderer","model","_mergeModelInOneObject","models","modelItem","updater","removeObserver","addObserver","context","oneModelObject","modelAtt","split","shift","createChildModelComponent","RouterComponent","rootHtmlId","routeContentsHtmlId","routerModel","_routerModel","routes","currentPage","_calculateCurrentPage","pageHtmlId","window","set","_goToCurrentPage","routerConfig","route","location","hash","queryString","replace","regex","RegExp","results","exec","decodeURIComponent","defaultRoute","getCurrentPage","title","currentComponent"],"mappings":"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","file":"fronty.js","sourcesContent":["/*\n  fronty.js: Component-based front-end JavaScript library\n  author: lipido\n*/\n\n/** \n *  Class representing a component, which is an object whose responsibilities\n *  are:\n *  <ul>\n *    <li>Render the HTML results of a provided\n *    {@link Component#renderer|renderer function} inside a specified element of\n *   the showing document, making as less DOM changes as possible.</li>\n *    <li>Manage nested child components. Child components are components which\n *      render in an element inside this component. When <em>this</em> Component\n *      re-renders, it restores its child's subtrees on their places. Child Components\n *      can be added manually (See {@link Component#addChildComponent}) or created\n *      dynamically by <em>this</em> Component via \n *      \"fronty-component\" attribute or via custom tag elements \n *      (See {@link Component#createChildComponent} and {@link Component#childTags}).</li>\n *    <li>Manage event listeners, restoring them each re-rendering.</li>\n *  </ul>\n *  <p>Components render when you call {@link Component#start|start()}, \n * and update each time you call the {@link Component#render|render()}\n * function.</p>\n *\n * @example\n * <!-- html page -->\n * <body>\n *  <div id=\"mycomponent\"></div>\n * </body>\n *\n * @example\n * //Javascript\n * var counter = 1;\n * var component = new Component(\n *  () => '<div>Counter: <span>'+counter+'</span></div>', // renderer function\n *  'mycomponent' // HTML element id\n *  );\n * component.start(); // first render\n * setInterval(() => {\n *    counter++; \n *    component.render(); // component re-render\n * }, 1000);\n */\nclass Component {\n\n\n  /**\n   * Creates a new Component.\n   *\n   * @constructor\n   * @param {Function} renderer A non-parameter function that returns HTML.\n   * @param {String} htmlNodeId The id of the HTML element where this Component should \n   *                              render to.\n   * @param {Array.<String>} [childTags] An optional Array of strings of custom-tags for\n   *                         dynamically created child Components \n   *                        (See {@link Component#createChildComponent}).\n   */\n  constructor(renderer, htmlNodeId, childTags) {\n\n    /**\n     * The renderer function.\n     *\n     * @name Component#renderer\n     * @type Function\n     * @callback\n     * @return {String} HTML content. It <strong>must</strong> return a single root element.\n     * @default null\n     */\n    this.renderer = renderer;\n\n    /**\n     * The HTML element id where it renders into.\n     * @name Component#htmlNodeId\n     * @type String\n     * @default null\n     */\n    this.htmlNodeId = htmlNodeId;\n\n    /**\n     * The optional name of custom element tags where child Components will\n     * be created dynamically.<br>\n     *\n     * During render, if in the HTML provided by the {@link Component#renderer|renderer function}\n     * one of these tags is found, the {@link Component#createChildComponent|createChildComponent()}\n     * function is called.\n     *\n     * @name Component#childTags\n     * @type String\n     * @default empty array\n     */\n    this.childTags = (childTags) ? childTags : [];\n\n    // do not render until the component is started with start()\n    /**\n     * Whether this Component is stopped.<br>\n     * \n     * Stopped Components do not render.\n     *\n     * @name Component#stopped\n     * @type Boolean\n     * @default true\n     */\n    this.stopped = true;\n\n    /**\n     * The event listeners that this Component is managing. \n     * See {@link Component#addEventListener|addEventListener()}.\n     *\n     * @name Component#eventListeners\n     * @type {Object.<string, {callback: Function, eventType: String}>}\n     */\n    this.eventListeners = [];\n\n    /**\n     * The array of child components.\n     *\n     * @name Component#childComponents\n     * @type Array.<Component>\n     */\n    this.childComponents = [];\n\n    /**\n     * The child components, arranged by their HTML element id.\n     *\n     * @name Component#childComponentIds\n     * @type Object.<string, Component>\n     */\n    this.childComponentIds = {};\n\n    /////// \"private\" members\n\n    // The global event listener placed on the root element of this Component\n    this._boundEventsListener = this._eventsListener.bind(this);\n\n    // The DOM tree of this component as it was in the previous render.\n    // We will not compare the new rendered trees coming from the renderer function\n    // to the real DOM. Why? We want that third-party libraries could do some changes\n    // in the real DOM so, if it is not necessary, we will try not to overwrite their \n    // changes. To achieve this, we keep a \"virtual DOM\" that may not be\n    // exactly the real DOM, so we only change things that are under our control,\n    // things that we added in the previous render.\n    this._previousVirtualDOM = null;\n\n    // Elements where fronty-component attribute is found\n    this._nodesWithFrontyComponentAttribute = [];\n\n    // An object for parsing HTML into DOM (classic root.innerHTML=htmlstring)\n    // We delegate on a \"parsing service\" object in order to allow the\n    // accumulation of multiple parsing requests and call \"innerHTML = ...\" once,\n    // instead of multiple times, which is faster.\n    this._parsingService = Component._defaultParsingService;\n  }\n\n\n  /**\n   * Gets the HTML element's id where this Component should render.\n   *\n   * <p>This element will be replaced with the contents of this component\n   * renderer function.</p>\n   *\n   * @returns {String} The HTML node id where this Component is rendered.\n   */\n  getHtmlNodeId() {\n    return this.htmlNodeId;\n  }\n\n  /**\n   * Sets the HTML element id where this Component should render in the next\n   * rendering.\n   *\n   * <p>The element will be replaced with the contents of this component\n   * renderer function.</p>\n   *\n   * @param {String} htmlNodeId The HTML node id where this Component will\n   *                            be rendered.\n   */\n  setHtmlNodeId(htmlNodeId) {\n    this.htmlNodeId = htmlNodeId;\n    this._resetVirtualDOM();\n  }\n\n  //// children management\n\n  /**\n   * Adds a child Component to this Component.\n   *\n   * <p>The HTML element where the child Component will render will not be re-rendered\n   * when <em>this</em> Component (the parent) is re-rendered.</p>\n   *\n   * <p>The child component will be started (and thus immediately rendered) or stopped \n   * if this Component is currently started or stopped, respectively.</p>\n   *\n   * @param {Component} component The child Component.\n   */\n  addChildComponent(component) {\n    this.childComponents.push(component);\n    this.childComponentIds[component.getHtmlNodeId()] = component;\n\n    if (this.stopped) {\n      component.stop();\n    } else {\n      component.start();\n    }\n  }\n\n  /**\n   * Creates a new child Component for a specified class name to be placed in a\n   * given HTML element. This method is intended to be overrided\n   * by subclasses.\n   *\n   * <p>Parent components define where to create new children via their rendered \n   * HTML in two ways:\n   * <ul>\n   * <li>Via <code>fronty-component</code> attribute. An element like\n   * <code>&lt;div fronty-component=\"ChildComponent\"&gt;&lt;/div&gt;</code>\n   * indicates that <code>ChildComponent</code> instances should be created and rendered\n   * on that element.</li>\n   *\n   * <li>Via custom HTML tag. These tags\n   * must be indicated in the constructor of the component. For example:\n   * <code>new Component(renderer, 'parentId', ['ChildComponent'])</code>,\n   * indicates that <code>ChildComponent</code> should be created\n   * and rendered into when elements with this tag name are found.\n   * <b>Note:</b> Remember that custom HTML tags do not work at any\n   * place. For example, as child of a <code>&lt;table&gt;</code> element.</li>\n   * </ul></p>\n   * <p>Everytime a new element indicating that a child should be created, this\n   * method is called to create the real instance.</p>\n   * \n   * <p><b>Note:</b> By default, this function uses <code>eval(''+className)</code>\n   * to create the instance. If you are packing your application and this library\n   * in different modules, eval may fail in finding the className. You must \n   * override the method to create the child.</p>\n   *\n   * @param {String} className The class name found in the HTML element\n   * @param {Node} element The HTML element where the new child will be placed\n   * @param {String} id The HTML id found in the tag.\n   * @return {Component} The new created child component.\n   * @see {@link Component#childTags}\n   */\n  createChildComponent(className, element, id) {\n    var constructorFunction = eval('' + className); //jshint ignore:line\n\n    if (constructorFunction instanceof Function) {\n      return new constructorFunction(id);\n    }\n  }\n\n  /**\n   * Removes a child Component from this Component.\n   *\n   * <p>After the child removal, <em>this</em> component will re-render.</p>\n   *\n   * @param {Component} component The child Component.\n   */\n  removeChildComponent(component) {\n    var index = this.childComponents.indexOf(component);\n\n    if (index != -1) {\n      this.childComponents[index].stop();\n      this.childComponents.splice(index, 1);\n      delete this.childComponentIds[component.getHtmlNodeId()];\n    }\n    this.render();\n  }\n\n  /**\n   * Gets the child Components of this Component.\n   *\n   * @returns {Array.<Component>} The child Components.\n   */\n  getChildComponents() {\n    return this.childComponents;\n  }\n\n  /**\n   * Gets the child Components arranged by id.\n   *\n   * @returns {Array.<String, Component>} The child Components arranged by id.\n   */\n  getChildComponentsById() {\n    return this.childComponentIds;\n  }\n\n  /**\n   * Gets a child Component given its HTML element id.\n   *\n   * @param {String} id The HTML element id.\n   * @returns {Component} The child Component.\n   */\n  getChildComponent(id) {\n    return this.childComponentIds[id];\n  }\n\n  //// rendering\n  /**\n   * Render this Component, which consists in:\n   * <ol>\n   * <li>Save the child Component DOM trees, because they may be moved to another place in the DOM.</li>\n   * <li>Call the {@link Component#renderer|renderer function}.</li>\n   * <li>Calculate the differences between the previous \"virtual\" DOM of this Component\n   * and the new \"virtual\" DOM provided by the renderer function, skipping those\n   * elements where child nodes are rendering.</li>\n   * <li>Patch the real DOM with the previously computed differences.</li>\n   * <li>Patch the previous \"virtual\" DOM with the previously computed differences,\n   * and save it as the next previous \"virtual\" DOM.</li>\n   * <li>Restore the child Components in their new places if they where moved to another\n   * part in the DOM.</li>\n   * <li>Restore event listeners in their corresponding elements, because \n   * some could be moved to another place in the DOM.</li>\n   * <li>Create child nodes if new elements with tag name in\n   * {@link Component#childTags} are found in the HTML.</li>\n   * </ol> \n   */\n  render() {\n\n    if (this.rendering === true) {\n      //avoid recursion\n      return;\n    }\n\n    if (this.stopped || !this.htmlNodeId || this._getComponentNode() === null) {\n      // if the component is stopped, there is no id to render o the document\n      // do not contains the id to render to\n      return;\n    }\n\n    this.rendering = true;\n\n    this.beforeRender(); //hook\n\n    // save child component subtrees\n    var savedChildNodes = this._saveChildNodes();\n\n    // call the render function\n    var htmlContents = this.renderer();\n\n    // the HTML is a string, parse it and then render\n    this._getDOMFromRendererOutput(htmlContents,\n      (newTree) => {\n\n        // compute the differences between the previous DOM and the newTree,\n        // updating both the real DOM and the previous DOM.\n        this._renderNewTree(newTree);\n\n        // restore child component subtrees\n        this._restoreChildNodes(savedChildNodes);\n\n        // put the global event listener on the root of this component\n        this._updateEventListeners();\n\n        // create all children that may have appeared in the form of\n        // custom tag HTML elements, or elements with the \"fronty-component\"\n        // attribute.\n        this._createChildComponents();\n\n\n        this.afterRender(); //hook\n\n        this.rendering = false;\n      });\n  }\n\n  // lifecycle management\n  /**\n   * Stops this Component and all of its children.<br>\n   *\n   * Stopped Components do not render. Once this Component \n   */\n  stop() {\n    if (this.stopped === false) {\n      this.stopped = true;\n\n      for (let i = 0; i < this.childComponents.length; i++) {\n        var child = this.childComponents[i];\n        child.stop();\n      }\n    }\n\n    this.onStop();\n  }\n\n  /**\n   * Starts this Component and all of its children.<br>\n   *\n   * A Component need to be started in order to render. If this Component\n   * was stopped, it will render. Once this Component has been started and\n   * rendered, the {@link Component#onStart|onStart()} hook is called.\n   */\n  start() {\n    if (this.stopped) {\n      this.stopped = false;\n\n      this._resetVirtualDOM();\n      this.render();\n\n      for (let i = 0; i < this.childComponents.length; i++) {\n        var child = this.childComponents[i];\n        child.start();\n      }\n    }\n    this.onStart();\n  }\n\n  // event-listener management\n  /**\n   * Adds an event listener to HTML element(s) inside this Component.<br>\n   *\n   * Listeners added to elements controlled by this Component should be added\n   * via this method, not directly to the HTML elements, because they can be\n   * removed during re-render. Listeners added with this method are always \n   * restored to the elements matching the selector query after rendering.\n   *\n   * @param {String} eventType The event type to be added to the elements.\n   * @param {String} nodesQuery A HTML selector query to find elements to\n   * attach the listener to.\n   * @param {Function} callback The callback function to dispatch the event.\n   */\n  addEventListener(eventType, nodesQuery, callback) { ///HOLA\n\n    this.eventListeners.push({\n      query: nodesQuery,\n      callback: callback,\n      eventType: eventType\n    });\n\n    var rootNode = this._getComponentNode();\n    if (rootNode !== null) {\n      this._getComponentNode().removeEventListener(eventType, this._boundEventsListener);\n      this._getComponentNode().addEventListener(eventType, this._boundEventsListener);\n    }\n  }\n\n\n  // Hooks\n\n  /**\n   * Hook function called by this Component before rendering. As a hook, it is\n   * intended to be overriden by subclasses.\n   */\n  beforeRender() { //hook\n  }\n\n  /**\n   * Hook function called by this Component after rendering. As a hook, it is\n   * intended to be overriden by subclasses.\n   */\n  afterRender() { //hook\n  }\n\n  /**\n   * Hook function called by this Component just after start. As a hook, it is\n   * intended to be overriden by subclasses.\n   */\n  onStart() { //hook\n  }\n\n  /**\n   * Hook function called by this Component just after stop. As a hook, it is\n   * intended to be overriden by subclasses.\n   */\n  onStop() { //hook\n  }\n\n  // \"private\" methods\n  _renderNewTree(newTree) {\n\n    let firstRender = this._previousVirtualDOM === null;\n\n    //  Get the currentTree to we will compare against\n    let currentTree = null;\n    if (!firstRender) {\n      // re-render. Restore the previous tree\n      currentTree = this._previousVirtualDOM.firstChild;\n    } else {\n      // first render, the currentTree to compare against is the actual DOM element\n      // where we will render\n      currentTree = this._getComponentNode();\n      // clean the destiny node\n      while (currentTree.firstChild) {\n        currentTree.removeChild(currentTree.firstChild);\n      }\n    }\n\n    // copy id attribute to the root element of this component.\n    // the component does not need to specify any id in its rendering function\n    // root element\n    if (newTree.nodeType === Node.ELEMENT_NODE) {\n      newTree.setAttribute('id', this.getHtmlNodeId());\n    }\n\n    // TODO: create here a hook to preprocess newTree before comparing\n\n    // compare the two trees: currentTree vs. newTree. \n    // This comparison is between the two virtual DOM trees\n    var patches = TreeComparator.diff(currentTree, newTree, (node1, node2) => {\n\n      // Special policy to do this comparison:\n\n      // 1. Ignore and totally replace the contents of the destinty node if we are in the first render. \n      if (firstRender) return TreeComparator.COMPARE_POLICY_REPLACE;\n\n      // 2. Skip comparisons on our children Component slots (child components are the responsible ones) \n      // The parent component, once re-rendered, should not touch children root nodes, since\n      // they are under control of child components.\n      if (node1.id && node2.id && node1.id === node2.id && (node1.id in this.childComponentIds)) {\n        return TreeComparator.COMPARE_POLICY_SKIP;\n      }\n\n      if (node1.id && (node1.id in this.childComponentIds)) {\n        // we want to compare a child component slot with another element, do a complete\n        // replacement\n        return TreeComparator.COMPARE_POLICY_REPLACE;\n      }\n\n      // By default, do a regular comparison\n      return TreeComparator.COMPARE_POLICY_DIFF;\n    });\n\n    // Apply patches to the REAL DOM\n    TreeComparator.applyPatches(patches, (patch) => {\n\n      // However, the patches contains nodes from the \"virtual\" DOM trees, not\n      // of the real DOM. We need no get the real nodes.\n      // Moreover, we will clone the nodes being inserted in the real DOM because\n      // we will reuse these patches to also patch our current virtual DOM so nodes\n      // cannot have two parents!\n      // To do these, we can use the patchMapping parameter of TreeComparator.applyPatches(),\n      // which allows us to change each being applied by another patch.\n\n      patch = Object.assign({}, patch); // shallow copy of the patch\n\n      // toReplace will be the real DOM node. In our virtual DOM, each node\n      // has a reference to the real DOM node (see the next few lines).\n      patch.toReplace = this._resolveRealNode(patch.toReplace);\n\n      if (patch.mode === TreeComparator.PATCH_INSERT_NODE ||\n        patch.mode === TreeComparator.PATCH_APPEND_CHILD ||\n        patch.mode === TreeComparator.PATCH_REPLACE_NODE) {\n\n        // If we will insert new nodes, we will clone them as well as\n        // to add a reference from the cloned nodes (which will remain in our\n        // virtual DOM) to the corresponding clones (which will be inserted in the real DOM)\n        patch.replacement = this._cloneAndIndex(patch.replacement);\n\n      } else if (patch.mode === TreeComparator.PATCH_SWAP_NODES) {\n        // in swap-nodes mode, both are nodes to be found in the real DOM,\n        // so we search for the replacement in the real DOM\n        patch.replacement = this._resolveRealNode(patch.replacement);\n      }\n\n      return patch;\n    });\n\n    if (firstRender) {\n      // in the first render, the next previous tree will be the current newTree\n\n      this._previousVirtualDOM = document.createElement('div');\n      this._previousVirtualDOM.appendChild(newTree);\n    } else {\n      // On re-render it will be the patches previous virtual DOM\n      //this._previousVirtualDOM.replaceChild(currentTree, this._previousVirtualDOM.firstChild);\n      TreeComparator.applyPatches(patches);\n    }\n  }\n\n  /*\n   * Creates a new DOM tree from the renderer output. If the renderer output\n   * is a string, we will get the dom by using the this._parsingService.\n   * If it is a DOM tree, we do not anything.\n   */\n  _getDOMFromRendererOutput(htmlContents, callback) {\n    if (typeof htmlContents === 'string') {\n      // We need to parse\n\n      htmlContents = this.renderer().trim();\n      var correctedHtmlContents = htmlContents;\n      // construct the new tree given by the render function\n      // fix: for roots starting with TR, TD or TH, they cannot be direct\n      // childs of div, they must be inside of a table to parse them with \n      // innerHTML\n      if (htmlContents.match(/^<tr .*/i) !== null) {\n        // trees starting with TR\n        correctedHtmlContents = '<table><tbody>' + htmlContents + '</tbody></table>';\n      } else if (htmlContents.match(/^<t[dh] .*/i) !== null) {\n        // trees starting with TD or TH\n        correctedHtmlContents = '<table><tbody><tr>' + htmlContents + '</tr></tbody></table>';\n      }\n\n      let newTree = document.createElement('div');\n\n      this._parsingService.parse(correctedHtmlContents, (node) => {\n        if (htmlContents.match(/^<tr .*/i) !== null) {\n          newTree.appendChild(node.firstChild.firstChild);\n        } else if (htmlContents.match(/^<t[dh] .*/i) !== null) {\n          newTree.appendChild(node.firstChild.firstChild.firstChild);\n        } else {\n\n\n          newTree.appendChild(node);\n        }\n        if (newTree.childNodes.length > 1) {\n          throw 'Rendering function MUST return a tree with a single root element ' + newTree.innerHTML;\n        }\n\n        callback(newTree.firstChild);\n      });\n    } else {\n\n      // htmlContents is a real DOM\n      callback(htmlContents);\n    }\n  }\n\n  _resolveRealNode(node) {\n\n    // if the node has an id of a child node, we find it via id\n    if (node.id !== undefined && this.childComponentIds[node.id] !== undefined) {\n      return document.getElementById(node.id);\n    }\n\n    // use the reference from the node to its corresponding clone in the real DOM\n    let result = node.realNode;\n\n    // No realNode? try to find by id (this is needed for the first render, where the new root node\n    // has the id of the slot of the component)\n    if (result === null || result === undefined && node.id !== undefined) {\n      result = document.getElementById(node.id);\n    }\n\n    return result;\n  }\n\n  _resetVirtualDOM() {\n    this._previousVirtualDOM = null;\n    this._nodesWithFrontyComponentAttribute = [];\n  }\n\n  /*\n   * Restores the child subtrees in their corresponding slots.\n   */\n  _restoreChildNodes(savedChildNodes) {\n    for (let i = 0; i < this.childComponents.length; i++) {\n      var childComponent = this.childComponents[i];\n      var childId = childComponent.getHtmlNodeId();\n      if (this._getChildNode(childId) !== null && childId in savedChildNodes) {\n        var currentComponentNode = this._getChildNode(childId);\n        if (savedChildNodes[childId] != currentComponentNode) {\n          currentComponentNode.parentNode.replaceChild(savedChildNodes[childId], currentComponentNode);\n        }\n      }\n    }\n  }\n\n  /*\n   * Creates and returns an index of child node ids to their current DOM element.\n   */\n  _saveChildNodes() {\n    var savedChildNodes = {};\n    for (let i = 0; i < this.childComponents.length; i++) {\n      var childComponent = this.childComponents[i];\n      var childId = childComponent.getHtmlNodeId();\n      if (this._getChildNode(childId) !== null) {\n        savedChildNodes[childId] = this._getChildNode(childId);\n      }\n    }\n\n    return savedChildNodes;\n  }\n\n  _getComponentNode() {\n    return document.getElementById(this.getHtmlNodeId());\n  }\n\n  _getChildNode(childId) {\n    return document.getElementById(childId);\n  }\n\n  /*\n   * Clones a DOM tree, while keeping references from original nodes to their\n   * corresponding clones. Moreover, it creates the _nodesWithFrontyComponentAttribute\n   * index.\n   */\n  _cloneAndIndex(root) {\n    let clone = root.cloneNode();\n    root.realNode = clone;\n\n    if (root.nodeType === Node.ELEMENT_NODE && root.hasAttribute('fronty-component')) {\n      this._nodesWithFrontyComponentAttribute.push(root);\n    }\n    for (let i = 0; i < root.childNodes.length; i++) {\n      clone.appendChild(this._cloneAndIndex(root.childNodes[i]));\n    }\n\n    return clone;\n  }\n\n  /*\n   * Creates child nodes dynamically.\n   * In addition, it also removes previously created child components whose slots\n   * are no longer available.\n   */\n  _createChildComponents() {\n\n    if (!this.childComponentsByClassName) {\n      this.childComponentsByClassName = {};\n    }\n\n    // create childs by tag\n    this._createTagBasedChildComponents();\n\n    // create childs by fronty-component attribute\n    this._createAttributeBasedChildComponents();\n\n    // remove children that have been dynamically created and their slots\n    // are no longer present\n    this._childrenGC();\n\n  }\n\n  /*\n   * Creates components nodes dynamically for elements with the custom tag <ClassName ...>\n   */\n  _createTagBasedChildComponents() {\n\n    let bufferedParsingService = new Component.BufferedParsingService();\n    bufferedParsingService.start();\n\n    for (let i = 0; i < this.childTags.length; i++) {\n      let childTag = this.childTags[i];\n      if (!this.childComponentsByClassName[childTag]) {\n        this.childComponentsByClassName[childTag] = {};\n      }\n      var childTagElements = Array.from(this._getComponentNode().getElementsByTagName(childTag));\n\n      for (let i = 0; i < childTagElements.length; i++) {\n        var childTagElement = childTagElements[i];\n        var itemId = childTagElement.getAttribute('id');\n\n        // create component if there is no child component for this id yet\n        if (!this.getChildComponent(itemId)) {\n          this._createAndAddChildComponent(childTag, childTagElement, itemId, bufferedParsingService);\n        }\n      }\n    }\n    bufferedParsingService.finish();\n  }\n\n  /*\n   * Creates child components dynamically for elements containing the \"fronty-component=className\"\n   * attribute.\n   */\n  _createAttributeBasedChildComponents() {\n\n    let bufferedParsingService = new Component.BufferedParsingService();\n    bufferedParsingService.start();\n\n    if (!this._nodesWithFrontyComponentAttribute) {\n      this._nodesWithFrontyComponentAttribute = [];\n    }\n\n    for (let j = this._nodesWithFrontyComponentAttribute.length - 1; j >= 0; j--) {\n      var node = this._nodesWithFrontyComponentAttribute[j];\n      var nodeId = node.getAttribute('id');\n      var className = node.getAttribute('fronty-component');\n\n      if (document.getElementById(nodeId) !== null) {\n\n        if (!this.getChildComponent(nodeId)) {\n          this._createAndAddChildComponent(className, node, nodeId, bufferedParsingService);\n        }\n      } else {\n        this._nodesWithFrontyComponentAttribute.splice(j, 1);\n      }\n    }\n    bufferedParsingService.finish();\n  }\n\n  /* \n   * Cleans remaining children that have disappear (these are tag based childs, fronty-component\n   * childs have been deleted just before).\n   */\n  _childrenGC() {\n    var childTags = Object.keys(this.childComponentsByClassName);\n    for (let i = 0; i < childTags.length; i++) {\n      var childTag = childTags[i];\n      var componentIdsInTag = Object.keys(this.childComponentsByClassName[childTag]);\n      for (let j = componentIdsInTag.length - 1; j >= 0; j--) {\n        var childComponent = this.childComponentsByClassName[childTag][componentIdsInTag[j]];\n\n        if (document.getElementById(childComponent.getHtmlNodeId()) === null) {\n\n          this.removeChildComponent(childComponent);\n          delete this.childComponentsByClassName[childTag][childComponent.getHtmlNodeId()];\n        }\n      }\n    }\n  }\n\n  /* \n   * Instantiates and indexes a new child component dynamically.\n   */\n  _createAndAddChildComponent(className, element, id, parsingService) {\n    let component = this.createChildComponent(className, element, id);\n    if (component) {\n      component.setHtmlNodeId(id);\n      let prevParsingService = component._parsingService;\n      component._parsingService = parsingService;\n      this.addChildComponent(component);\n      component._parsingService = prevParsingService;\n\n      if (this.childComponentsByClassName[className] === undefined) {\n        this.childComponentsByClassName[className] = {};\n      }\n\n      this.childComponentsByClassName[className][id] = component;\n    }\n  }\n\n  // event listeners \"private\" methods\n\n  // global event listener for this component. All events are dispatched first by\n  // this function. If the target of the event matches one of the listener's query\n  // indicated in {@link Component#addEventListener}, the\n  // event is redirected to the provided callback function.\n  _eventsListener(event) {\n    for (let i = 0; i < this.eventListeners.length; i++) {\n      let listener = this.eventListeners[i];\n      if (event.target.matches(listener.query) && listener.eventType === event.type) {\n        event.preventDefault();\n        listener.callback(event);\n        return;\n      }\n    }\n  }\n\n  // place the global event listener in the root of this component\n  _updateEventListeners() {\n    var rootNode = this._getComponentNode();\n    if (rootNode !== null) {\n      for (let i = 0; i < this.eventListeners.length; i++) {\n        let listener = this.eventListeners[i];\n        rootNode.removeEventListener(listener.eventType, this._boundEventsListener);\n        rootNode.addEventListener(listener.eventType, this._boundEventsListener);\n      }\n    }\n  }\n}\n\n// A simple parsing service that immediately parses the html content and\n// calls the callback with the results\nComponent.ParsingService = class ParsingService {\n  parse(htmlContents, callback) {\n    var elem = document.createElement('div');\n    elem.innerHTML = htmlContents;\n    callback(elem.firstChild);\n  }\n};\n\n// A parsing service that accumulates parsing requests with an associated callback\n// to pass the results when available. When the finish() method\n// is called, all html received previously is parsed in a row and the corresponding callbacks\n// are invoked.\nComponent.BufferedParsingService = class BufferedParsingService extends Component.ParsingService {\n  constructor() {\n    super();\n    this.currentHTML = '';\n    this.counter = 0;\n    this.callbacks = [];\n  }\n\n  start() {\n    this.counter = 0;\n    this.currentHTML = '';\n    this.callbacks = [];\n  }\n\n  finish() {\n    if (this.callbacks.length > 0) {\n      this.parsedTree = document.createElement('div');\n      this.parsedTree.innerHTML = this.currentHTML;\n\n      for (let i = 0; i < this.callbacks.length; i++) {\n        var callback = this.callbacks[i];\n        callback();\n      }\n    }\n  }\n\n  parse(html, callback) {\n    this.currentHTML += '<div>' + html + '</div>';\n    var currentCounter = this.counter;\n    this.callbacks.push(() => {\n      callback(this.parsedTree.childNodes[currentCounter].firstChild);\n    });\n    this.counter++;\n  }\n\n};\n\nComponent._defaultParsingService = new Component.ParsingService();\n\n\n/*********** DOM TREE DIFF & PATCH *******/\n/**\n * A class to do discover differences between two DOM trees, calculating a\n * <em>patch</em>, as well as to reconcile those differences by applying the\n * <em>patch</em>\n */\nclass TreeComparator {\n\n  /**\n   * Compute the difference between two DOM trees, giving their root nodes.<br>\n   *\n   * The resulting object is a <em>patch</em> object that can be used to \n   * keep the first given tree equivalent to the second given tree.<br>\n   *\n   * An optional function can be provided to control how different subtrees are\n   * compared. This function receives two nodes (node1, node2) and can return:\n   * <ul>\n   * <li>TreeComparator.COMPARE_POLICY_DIFF: The comparison should be done as normal.</li>\n   * <li>TreeComparator.COMPARE_POLICY_SKIP: The comparison should not go deeper.</li>\n   * <li>TreeComparator.COMPARE_POLICY_REPLACE: The node1 should be totally replaced by the node2,\n   * without going deeper</li>\n   * </ul>\n   * @param {Node} node1 The root element of the first tree to compare.\n   * @param {Node} node2 The root element of the second tree to compare.\n   * @param {Function} [comparePolicy] An (optional) callback function to be called\n   * before comparing subnodes.\n   */\n  static diff(node1, node2, comparePolicy) {\n    if (comparePolicy) {\n      var actionToDo = comparePolicy(node1, node2);\n      if (actionToDo === TreeComparator.COMPARE_POLICY_SKIP) {\n        return [];\n      } else if (actionToDo === TreeComparator.COMPARE_POLICY_REPLACE) {\n        return [{\n          mode: TreeComparator.PATCH_REPLACE_NODE,\n          toReplace: node1,\n          replacement: node2\n        }];\n      } //otherwise, i.e.: TreeComparator.COMPARE_POLICY_DIFF, do nothing\n    }\n\n    var result = [];\n\n    if (node1 !== null && node1.tagName === node2.tagName && node1.nodeType === node2.nodeType) {\n      // equal tagName and nodeType, compare children...\n      if (node1.childNodes.length > 0 || node2.childNodes.length > 0) {\n        TreeComparator._compareChildren(node1, node2, comparePolicy, result);\n      }\n    } else {\n      // different tagName, nodeType, complete replacement\n      return [{\n        mode: TreeComparator.PATCH_REPLACE_NODE,\n        toReplace: node1,\n        replacement: node2\n      }];\n    }\n\n    if (\n      (node1.nodeType === Node.TEXT_NODE || node1.nodeType === Node.COMMENT_NODE) &&\n      node1.nodeValue !== null &&\n      node2.nodeValue !== null &&\n      node1.nodeValue !== node2.nodeValue\n    ) {\n      // for text and comment nodes, we compare their nodeValue. Text nodes and\n      // comment nodes have no chidren, so we return immediately.\n      return [{\n        mode: TreeComparator.PATCH_SET_NODE_VALUE,\n        toReplace: node1,\n        replacement: node2\n      }];\n    }\n    \n    if (!TreeComparator._equalAttributes(node1, node2)) {\n      // if there are some differences in attributtes, add this patch also.\n      result.push({\n        mode: TreeComparator.PATCH_SET_ATTRIBUTES,\n        toReplace: node1,\n        replacement: node2\n      });\n    }\n    return result;\n  }\n\n  static _compareChildren(node1, node2, comparePolicy, result) {\n\n    let child1pos = 0;\n    let child2pos = 0;\n    let insertions = 0;\n    let deletions = 0;\n\n    // create a copy-on-write array for node1.childNodes. We will keep track\n    // of the performed swap operations without modifying the original node1.childNodes\n    let node1ChildNodes = [];\n\n    let node1Keys = TreeComparator._buildChildrenKeyIndex(node1);\n    let node2Keys = TreeComparator._buildChildrenKeyIndex(node2);\n\n    while (child1pos < node1.childNodes.length && child2pos < node2.childNodes.length) {\n      let child1 = node1ChildNodes[child1pos] ? node1ChildNodes[child1pos] : node1.childNodes[child1pos];\n      let child2 = node2.childNodes[child2pos];\n\n      if (child1.nodeType === Node.ELEMENT_NODE && child2.nodeType === Node.ELEMENT_NODE) {\n        let key1 = child1.getAttribute('key'); // maybe null (no-key)\n        let key2 = child2.getAttribute('key'); // maybe null (no-key)\n\n        if (key1 !== key2) {\n          if ((key1 in node2Keys) && (key2 in node1Keys)) {\n\n            //both nodes are in the initial and final result, so we only need to swap them\n            result.push({\n              mode: TreeComparator.PATCH_SWAP_NODES,\n              toReplace: child1,\n              replacement: node1.childNodes[node1Keys[key2].pos]\n            });\n\n            // swap elements in the node1ChildNodes\n            var temp = node1ChildNodes[child1pos] ? node1ChildNodes[child1pos] : node1.childNodes[child1pos];\n            node1ChildNodes[child1pos] = node1ChildNodes[node1Keys[key2].pos] ? node1ChildNodes[node1Keys[key2].pos] : node1.childNodes[node1Keys[key2].pos];\n            node1ChildNodes[node1Keys[key2].pos] = temp;\n\n          } else {\n            //both nodes are NOT in the initial and final result\n            if (!(key2 in node1Keys)) {\n              // if a key element in the new result is missing in the current tree, we should insert it\n              result.push({\n                mode: TreeComparator.PATCH_INSERT_NODE,\n                toReplace: node1,\n                replacement: child2,\n                beforePos: child1pos + insertions - deletions\n              });\n              insertions++;\n              child2pos++;\n\n            }\n            // and if a key element in the current result is missing in the new result, we should remove it\n            if (!(key1 in node2Keys)) {\n              result.push({\n                mode: TreeComparator.PATCH_REMOVE_NODE,\n                toReplace: child1\n              });\n              child1pos++;\n              deletions++;\n\n            }\n          }\n\n        } else {\n          // both keys are equals (same key OR both null)\n          result.push.apply(result, TreeComparator.diff(\n            child1,\n            child2,\n            comparePolicy));\n\n          child1pos++;\n          child2pos++;\n        }\n      } else if (child1.nodeType !== Node.ELEMENT_NODE && child2.nodeType === Node.ELEMENT_NODE) {\n        // \"strange\" non-element nodes on current tree are removed\n        result.push({\n          mode: TreeComparator.PATCH_REMOVE_NODE,\n          toReplace: child1\n        });\n        child1pos++;\n        deletions++;\n      } else if (child1.nodeType === Node.ELEMENT_NODE && child2.nodeType !== Node.ELEMENT_NODE) {\n        // new non-element nodes on new tree are inserted\n        result.push({\n          mode: TreeComparator.PATCH_INSERT_NODE,\n          toReplace: node1,\n          replacement: child2,\n          beforePos: child1pos + insertions - deletions\n        });\n        insertions++;\n        child2pos++;\n        \n      } else if (child1.nodeType !== Node.ELEMENT_NODE && child2.nodeType !== Node.ELEMENT_NODE) {\n        // both non-element nodes are compared\n        var partial =\n          TreeComparator.diff(\n            child1,\n            child2,\n            comparePolicy);\n        result.push.apply(result, partial);\n\n        child1pos++;\n        child2pos++;\n      }\n    }\n\n    if (child1pos < node1.childNodes.length) {\n      for (let i = child1pos; i < node1.childNodes.length; i++) {\n        result.push({\n          mode: TreeComparator.PATCH_REMOVE_NODE,\n          toReplace: node1.childNodes[i]\n        });\n      }\n    } else if (child2pos < node2.childNodes.length) {\n      for (let j = child2pos; j < node2.childNodes.length; j++) {\n        result.push({\n          mode: TreeComparator.PATCH_APPEND_CHILD,\n          toReplace: node1,\n          replacement: node2.childNodes[j]\n        });\n      }\n    }\n  }\n\n  static _swapArrayElements(arr, indexA, indexB) {\n    var temp = arr[indexA];\n    arr[indexA] = arr[indexB];\n    arr[indexB] = temp;\n  }\n\n  static _buildChildrenKeyIndex(node) {\n    let index = {};\n    let childpos = -1;\n    for (let i = 0; i < node.childNodes.length; i++) {\n      let child = node.childNodes[i];\n      childpos++;\n      if (child.nodeType === Node.ELEMENT_NODE) {\n        let key = child.getAttribute('key');\n        if (key) {\n          index[key] = {\n            node: child,\n            pos: childpos\n          };\n        }\n      }\n    }\n    return index;\n  }\n\n  static _equalAttributes(node1, node2) {\n    if (!node1.attributes && !node2.attributes) {\n      return true;\n    }\n\n    if (!node1.attributes && node2.attributes ||\n      node1.attributes && !node2.attributes) {\n      return false;\n    }\n\n    //TODO: receive this id as paremeter\n\n    if (node1.attributes.length !== node2.attributes.length) {\n      return false;\n    }\n\n    for (let i = 0; i < node1.attributes.length; i++) {\n      if (node1.attributes[i].name != node2.attributes[i].name ||\n        node1.attributes[i].value != node2.attributes[i].value) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  static _swapElements(obj1, obj2) {\n    var temp = document.createElement(\"div\");\n    obj1.parentNode.insertBefore(temp, obj1);\n    obj2.parentNode.insertBefore(obj1, obj2);\n    temp.parentNode.insertBefore(obj2, temp);\n    temp.parentNode.removeChild(temp);\n  }\n\n  /**\n   * Applies the patches to the current DOM.\n   *\n   * @param patches Patches previously computed with {@link TreeComparator.diff}\n   */\n  static applyPatches(patches, patchMapping) {\n    for (let i = 0; i < patches.length; i++) {\n      var patch = patches[i];\n      if (patchMapping !== undefined) {\n        patch = patchMapping(patch);\n      }\n      // HTML nodes\n      var toReplace = patch.toReplace;\n      var replacement = patch.replacement;\n      switch (patch.mode) {\n        case TreeComparator.PATCH_SET_ATTRIBUTES:\n          var attribute = null;\n          for (let i = 0; i < replacement.attributes.length; i++) {\n            attribute = replacement.attributes[i];\n            if (attribute.name === 'value' &&\n              toReplace.value != attribute.value) {\n              toReplace.value = attribute.value;\n            }\n            if (attribute.name === 'checked') {\n              toReplace.checked =\n                (attribute.checked !== false) ? true : false;\n            }\n            toReplace.setAttribute(attribute.name, attribute.value);\n          }\n\n          for (let j = toReplace.attributes.length - 1; j >= 0; j--) {\n            attribute = patch.toReplace.attributes[j];\n            if (!replacement.hasAttribute(attribute.name)) {\n              if (attribute.name === 'checked') {\n                toReplace.checked = false;\n              }\n              toReplace.removeAttribute(attribute.name);\n            }\n          }\n          break;\n        case TreeComparator.PATCH_SET_NODE_VALUE:\n          patch.toReplace.nodeValue = patch.replacement.nodeValue;\n\n          break;\n        case TreeComparator.PATCH_REMOVE_NODE:\n          patch.toReplace.parentNode.removeChild(patch.toReplace);\n          break;\n        case TreeComparator.PATCH_APPEND_CHILD:\n          patch.toReplace.appendChild(patch.replacement);\n          break;\n        case TreeComparator.PATCH_INSERT_NODE:\n          if (patch.toReplace.childNodes.length === 0) {\n            patch.toReplace.appendChild(patch.replacement);\n          } else {\n            patch.toReplace.insertBefore(patch.replacement, patch.toReplace.childNodes[patch.beforePos]);\n          }\n          break;\n        case TreeComparator.PATCH_SWAP_NODES:\n          TreeComparator._swapElements(patch.toReplace, patch.replacement);\n          break;\n        case TreeComparator.PATCH_REPLACE_NODE:\n          toReplace.parentNode.replaceChild(replacement, toReplace);\n      }\n    }\n  }\n}\nTreeComparator.PATCH_INSERT_NODE = 0;\nTreeComparator.PATCH_REMOVE_NODE = 1;\nTreeComparator.PATCH_SWAP_NODES = 2;\nTreeComparator.PATCH_APPEND_CHILD = 3;\nTreeComparator.PATCH_REPLACE_NODE = 4;\nTreeComparator.PATCH_SET_NODE_VALUE = 5;\nTreeComparator.PATCH_SET_ATTRIBUTES = 6;\n\nTreeComparator.COMPARE_POLICY_SKIP = 0;\nTreeComparator.COMPARE_POLICY_REPLACE = 1;\nTreeComparator.COMPARE_POLICY_DIFF = 2;\n/**\n * A Model is a general-purpose, observable object, holding user specific data.\n *\n *  The object can receive <em>observer functions</em> (via \n * {@link Model#addObserver|addObserver()} function), which will be notified\n *  when the {@link Model#set|set( callback )} method of this object is called.\n *\n */\nclass Model {\n\n  /**\n   * Creates an instance of a Model.\n   *\n   * @param {String} [name=--unnamed model--] A name for the model\n   */\n  constructor(name) {\n    /**\n     * The set of observer functions to be called when this Model is changed\n     * via {@link Model#set|set()} method.\n     */\n    this.observers = [];\n\n    /**\n     * The name of the model.\n     * @type {String}\n     */\n    this.name = name ? name : '--unnamed model--';\n  }\n\n  /**\n   * Method to update the this Model.<br>\n   * A callback function is passed which is, typically, in charge to make changes \n   * in this object. When this callback returns, observers of this Model are\n   * notified.\n   * @example\n   *  Model m = new Model('mymodel');\n   *  m.set( () => { m.itemName='Tablet'; m.price=1200});\n   * \n   * @param {Function} update The callback function in charge of changing this \n   *        Model. The function will receive the reference to this Model as \n   *        parameter.\n   * @param {Object} [hint] Any additional object to be passed to\n   *         {@link Model#observers|observers} during notification.\n   */\n  set(update, hint) {\n    update(this);\n    this.notifyObservers(hint);\n  }\n\n  /**\n   * Invokes all {@link Model#observers|observers}.\n   *\n   * @param {Object} [hint] An optional object to pass as argument to observers.\n   */\n  notifyObservers(hint) {\n    for (let i = 0; i < this.observers.length; i++) {\n      let observer = this.observers[i];\n      observer(this, hint);\n    }\n  }\n\n  /**\n   * Adds an observer function to this Model.<br>\n   * \n   * @param {Function} observer The observer to add.\n   * @see {@link Model#observers}\n   */\n  addObserver(observer) {\n    this.observers.push(observer);\n    //console.log('Model [' + this.name + ']: added observer, total: ' + this.observers.length);\n  }\n\n  /**\n   * Removes an observer function from this Model.<br>\n   *\n   * The function will no longer be notified of changes in this Model.\n   *\n   * @param {Function} observer The observer to be removed.\n   */\n  removeObserver(observer) {\n    if (this.observers.indexOf(observer) != -1) {\n      this.observers.splice(this.observers.indexOf(observer), 1);\n      //console.log('Model [' + this.name + ']: removed observer, total: ' + this.observers.length);\n    }\n  }\n}\n\n\n/** \n * Class representing a model-based Component.<br>\n *\n * A ModelComponent is a Component which <em>auto-renders</em> itself when a\n * given {@link Model|model} object changes. This model object is also passed to this\n * Component's {@link Component#renderer|renderer function} each time this\n * Component is rendered.\n *\n * @example\n * <!-- html page -->\n * <body>\n *  <div id=\"mycomponent\"></div>\n * </body>\n *\n * @example\n * // Javascript\n * // Model\n * var model = new Model();\n * model.counter = 0;\n *\n * // The ModelComponent to render the Model\n * var component = new ModelComponent(\n *  (m) => '<div>Counter: <span>'+m.counter+'</span></div>', // renderer function\n *  model, //the model\n *  'mycomponent' // HTML element id\n *  );\n *\n * component.start(); // first render\n *\n * // Make changes in Model to fire re-renders\n * setInterval(() => {\n *    model.set( () => model.counter++); // model update -> automatic re-render!\n * }, 1000);\n * @extends Component\n */\nclass ModelComponent extends Component {\n\n  /**\n   * Creates a new ModelComponent.\n   *\n   * @param {Function} modelRenderer A renderer function which accepts a\n   * {@link Model} as argument.\n   * @param {Model|Array.<Model>} model The model or an array of models. In case of\n   * an array is passed, the renderer function will receive a single model object\n   * which combines all the properties of those models.\n   * @param {String} htmlNodeId The id of the HTML element where this Component should \n   *                              render to.\n   * @param {Array.<String>} [childTags] An optional Array of strings of custom-tags for dynamically created child Components.\n   */\n  constructor(modelRenderer, model, htmlNodeId, childTags) {\n    super(\n      // the renderer function wraps the modelRenderer function in order to\n      // pass the model to the modelRenderer.\n      () => {\n        return modelRenderer(this._mergeModelInOneObject());\n      },\n      htmlNodeId, childTags\n    );\n\n    if (!model) {\n      /**\n       * The models this ModelComponent is handling\n       * @type {Array.<Model>}\n       */\n      this.models = [];\n    } else if (model instanceof Model) {\n      this.models = [model];\n    } else if (model instanceof Array) {\n\n      for (let i = 0; i < model.length; i++) {\n        let modelItem = model[i];\n        if (!(modelItem instanceof Model)) {\n          throw 'Component [' + this.htmlNodeId + ']: the model must inherit Model';\n        }\n      }\n\n      this.models = model;\n    } else {\n      throw 'Component [' + this.htmlNodeId + ']: the model must inherit Model';\n    }\n\n    this.updater = this.update.bind(this); // the update function bound to this\n  }\n\n  /**\n   * The observer function added to all models this ModelComponent manages.<br>\n   * This function simply calls {@link ModelComponent#render|render}, but\n   * you can override it.\n   *\n   * @param {Model} model The model that has been updated.\n   */\n  update(model) {\n    //console.log('Component [#' + this.htmlNodeId + ']: received update from Model [' + model.name + ']');\n    this.render();\n  }\n\n  // lifecycle management\n  stop() {\n\n    if (this.stopped === false) {\n      for (let i = 0; i < this.models.length; i++) {\n        let model = this.models[i];\n        model.removeObserver(this.updater);\n      }\n    }\n    super.stop();\n  }\n\n  start() {\n    if (this.stopped) {\n      for (let i = 0; i < this.models.length; i++) {\n        let model = this.models[i];\n        model.addObserver(this.updater);\n      }\n    }\n    super.start();\n  }\n\n  _mergeModelInOneObject() {\n    var context = {};\n    for (let i = 0; i < this.models.length; i++) {\n      let model = this.models[i];\n      context = Object.assign(context, model);\n    }\n    return context;\n  }\n\n  /** \n   * Overrides the child Component creation by also considering a \"model\"\n   * attribute in the tag.<br>\n   * The model attribute is used as a path inside the model object and calls \n   * {@link ModelComponent#createChildModelComponent}.\n   * @example\n   * <!-- How to add a model attribute in the HTML child tag -->\n   * <childcomponent id=\"child-0\" model=\"items[0]\">\n   *\n   * @param {String} tagName The HTML tag name used to place the new child Component\n   * in the parent HTML\n   * @param {Node} childTagElement The HTML element where the new Child will be placed\n   * @param {String} id The HTML id found in the tag.\n   * @return {Component} The new created child Component.\n   * @see {@link Component#childTags}\n   */\n  createChildComponent(className, element, id) {\n    let oneModelObject = this._mergeModelInOneObject();\n\n    let modelAtt = element.getAttribute('model');\n    let modelItem = null;\n    if (modelAtt.indexOf('(') === -1) {\n      // for simple expressions, do not use eval (slower)\n      // navigate the object graph manually\n      modelItem = oneModelObject;\n      let arr = modelAtt.split(/[.\\[\\]]/);\n      while (arr.length) {\n        let elem = arr.shift();\n        if (elem.length !== 0) {\n          modelItem = modelItem[elem];\n        }\n      }\n\n    } else {\n      // complex including (), use eval\n      modelItem = eval('oneModelObject.' + element.getAttribute('model')); //jshint ignore:line\n    }\n    return this.createChildModelComponent(className, element, id, modelItem);\n  }\n\n  /**\n   * This method searches for a class with the name of the className parameter\n   * with a constructor taking two attributes: id and model.<br>\n   * If you have components with different constructors or this policy does not\n   * adapt to your needs, you can override this method.\n   *\n   * @param {String} className The class name found in the element\n   * @param {Node} element The HTML element where the new child will be placed\n   * @param {String} id The HTML id found in the element.\n   * @param {Object} modelItem a model object for the new Component.\n   * @return {Component} The new created child component.\n   */\n  createChildModelComponent(className, element, id, modelItem) {\n    var constructorFunction = eval('' + className); //jshint ignore:line\n\n    if (constructorFunction instanceof Function) {\n      return new constructorFunction(id, modelItem);\n    }\n  }\n}\n\n/**\n *  Class representing a router component.<br>\n *  \n *  A router is reponsible of parsing the current browser location \n *  mapping its current hash to \"pages\". Each time the location is\n *  changed, the router tries to replace the inner HTML in a given html node id\n *  element.Pages are:\n * <ol>\n *    <li>A Component, which will render the page contents.</li>\n *    <li>Some other options, such as title.</li>\n *  </ol>\n *  You have to define your by calling {@link RouterComponent#setRouterConfig}.<br>\n *  Finally, calling start() will try to go to the page indicated by the hash, rendering\n *  its contents.<br>\n *  The RouterComponent is a {@link ModelComponent} because it has an own Model\n *  containing the \"currentPage\" property.\n *\n * @example\n * var router = new RouterComponent(\n *      // id of the HTML element where router renders.\n *      'router', \n *      //HTML of the router.\n *      () => \"<div id='router'><div id='maincontent'></div></div>\", \n *      // id inside the router where the current page component renders.\n *      'maincontent'); \n * router.setRouterConfig(\n * {    \n *    login: { //rendered on http://<host>/<page>.html#login\n *      component: new LoginComponent(), // LoginComponent is a Component\n *      title: 'Login'\n *    },\n *    // more pages\n *    defaultRoute: 'login'\n * });\n * router.start();\n *\n * @extends ModelComponent\n */\nclass RouterComponent extends ModelComponent {\n\n  /**\n   * Creates a new router.<br>\n   * \n   * @param {String} rootHtmlId The HTML element id where the router renders.\n   * @param {Function} modelRenderer the model renderer function\n   */\n  constructor(rootHtmlId, modelRenderer, routeContentsHtmlId, model) {\n\n    // add a routerModel to the given model(s), creating an array\n    var routerModel = new Model('RouterModel');\n\n    if (model instanceof Array) {\n      model.push(routerModel);\n    } else if (model !== null && model !== undefined) {\n      model = [routerModel, model];\n    } else {\n      model = routerModel;\n    }\n\n    super(modelRenderer, model, rootHtmlId);\n\n    this._routerModel = routerModel;\n    this.routes = {};\n\n    this._routerModel.currentPage = this._calculateCurrentPage();\n\n    this.pageHtmlId = routeContentsHtmlId;\n\n    window.addEventListener('hashchange', () => {\n      //console.log(\"Router: page changed\");\n      this._routerModel.set(() => {\n        this._routerModel.currentPage = this._calculateCurrentPage();\n      });\n    });\n  }\n\n  /**\n   * This function overrides the {@link ModelComponent#update}, by also \n   * checking if the model being changed is this RouterComponent's model. In\n   * such a case, the RouterComponent goes to the page the model indicates.\n   *\n   * @param {Model} model The model that has been updated.\n   */\n  update(model) {\n    super.update(model);\n    if (model == this._routerModel) {\n      this._goToCurrentPage();\n    }\n  }\n\n  /**\n   * Sets the router configuration. This configuration basically maps\n   * URL hashes to Components that should be showed.\n   *\n   * @param {Object.<String, {component: Component, title: String}>}\n   * routerConfig Mapping of URL hashes to pages.\n   * \n   * @example\n   * router.setRouterConfig(\n   * {    \n   *    login: { //rendered on http://<host>/<page>.html#login\n   *      component: new LoginComponent(), // LoginComponent is a Component\n   *      title: 'Login'\n   *    },\n   *    // more pages\n   *    defaultRoute: 'login'\n   * });\n   */\n  setRouterConfig(routerConfig) {\n    this.routes = routerConfig;\n    this._routerModel.currentPage = this._calculateCurrentPage();\n  }\n\n  onStart() {\n    this._goToCurrentPage();\n  }\n\n  /**\n   * Displays to an specified page. Pages are defined in \n   * {@link RouterComponent#setRouterConfig}\n   *\n   * @param {String} route The route to go. Example: 'login'\n   */\n  goToPage(route) {\n    window.location.hash = '#' + route;\n  }\n\n  /**\n   * Gets the current page being shown.\n   * @return {String} The current page.\n   */\n  getCurrentPage() {\n    return this._routerModel.currentPage;\n  }\n\n  /**\n   * Gets this the model of this router.<br>\n   *\n   * The router contains an internal model where the current page is stored \n   * (among those models provided in the constructor). You can obtain this\n   * internal model by calling this function.\n   *\n   * @return {Model} The model of this router.\n   */\n  getRouterModel() {\n    return this._routerModel;\n  }\n\n  /**\n   * Gets a query parameter of the current route.<br>\n   *\n   * Note: <em>route query parameters</em> are NOT the standard URL query\n   * parameters, which are specified BEFORE the hash.<br>\n   *\n   * For example, if the current URL is 'index.html#login?q=1',\n   * a call to getRouteQueryParam('q') returns 1.\n   *\n   * @param {String} name The name of the route query parameter.\n   * @return The value of the router query parameter.\n   */\n  getRouteQueryParam(name) {\n    var queryString = window.location.hash.replace(/#[^\\?]*(\\?.*)/, \"$1\");\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n      results = regex.exec(queryString);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n  }\n\n  _calculateCurrentPage() {\n    var currentPage = window.location.hash.replace(/#([^\\\\?]*).*/, \"$1\");\n    if (currentPage.length === 0 && this.routes.defaultRoute) {\n      currentPage = this.routes.defaultRoute;\n    }\n    return currentPage;\n\n  }\n  _goToCurrentPage() {\n    var currentPage = this.getCurrentPage();\n\n    if (currentPage) {\n\n      // get page component and update the main body element\n      if (currentPage in this.routes) {\n        if (this.routes[currentPage].title) {\n          document.title = this.routes[currentPage].title;\n        }\n\n        // stop the previous component\n        if (this.currentComponent) {\n          this.currentComponent.stop();\n        }\n        this.removeChildComponent(this.currentComponent);\n\n        // start the new page's component\n        this.currentComponent = this.routes[currentPage].component;\n        this.currentComponent.setHtmlNodeId(this.pageHtmlId);\n\n        this.addChildComponent(this.currentComponent);\n        this.routes[currentPage].component.start();\n\n      } else {\n        //console.log('Router undefined page ' + currentPage);\n      }\n    } else {\n      //console.log('Router: no default page defined');\n    }\n  }\n}\n\nexport {\n    Model,\n    ModelComponent,\n    Component,\n    RouterComponent,\n    TreeComparator\n};\n"]}