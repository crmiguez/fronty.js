{"version":3,"sources":["../src/fronty.js"],"names":["Component","renderer","htmlNodeId","childTags","_childTagsCanonical","map","tag","toUpperCase","stopped","eventListeners","childComponents","childComponentIds","_boundEventsListener","_eventsListener","bind","_previousVirtualDOM","_nodesWithFrontyComponentAttribute","_nodesWithCustomTag","_parsingService","_defaultParsingService","_resetVirtualDOM","component","push","getHtmlNodeId","stop","start","className","element","id","constructorFunction","eval","Function","index","indexOf","splice","render","rendering","_getComponentNode","beforeRender","firstRender","currentTree","firstChild","removeChild","buildFirstRenderTree","newTree","document","createElement","appendChild","clonedTree","_cloneAndIndex","parentNode","replaceChild","_updateEventListeners","_createChildComponents","afterRender","computePatches","patches","TreeComparator","applyPatches","savedChildNodes","_saveChildNodes","patch","toReplace","replacement","undefined","_resolveRealNode","mode","PATCH_INSERT_NODE","PATCH_APPEND_CHILD","PATCH_REPLACE_NODE","PATCH_SWAP_NODES","_restoreChildNodes","callback","renderNewDOM","nodeType","Node","ELEMENT_NODE","setAttribute","diff","node1","node2","COMPARE_POLICY_ATTRIBUTES","COMPARE_POLICY_REPLACE","COMPARE_POLICY_DIFF","i","length","child","onStop","onStart","eventType","nodesQuery","query","rootNode","removeEventListener","addEventListener","htmlContents","trim","correctedHtmlContents","match","parse","node","childNodes","innerHTML","result","realNode","getElementById","childComponent","childId","_getChildNode","currentComponentNode","root","clone","cloneNode","hasAttribute","componentClass","getAttribute","tagIndex","tagName","hasChildNodes","_createDynamicChildComponents","nodes","bufferedParsingService","BufferedParsingService","j","nodeId","_createOrUpdateChildComponent","getChildComponent","removeChildComponent","finish","_createAndAddChildComponent","updateChildComponent","parsingService","createChildComponent","setHtmlNodeId","prevParsingService","addChildComponent","event","listener","target","matches","type","preventDefault","ParsingService","elem","currentHTML","counter","callbacks","parsedTree","html","currentCounter","comparePolicy","actionToDo","COMPARE_POLICY_SKIP","_equalAttributes","PATCH_SET_ATTRIBUTES","_compareChildren","TEXT_NODE","COMMENT_NODE","nodeValue","PATCH_SET_NODE_VALUE","child1pos","child2pos","insertions","deletions","node1ChildNodes","node1Keys","lastPos","node2Keys","child1","child2","key1","key2","_buildChildrenKeyIndex","pos","temp","beforePos","PATCH_REMOVE_NODE","apply","partial","arr","indexA","indexB","currentIndex","untilFind","Math","max","key","isEqualNode","attributes","name","value","obj1","obj2","insertBefore","patchMapping","attribute","checked","removeAttribute","_swapElements","Model","observers","update","hint","notifyObservers","observer","ModelComponent","modelRenderer","model","_mergeModelInOneObject","models","updater","modelName","hasOwnProperty","removeObserver","addObserver","Object","keys","context","modelNames","assign","modelAtt","modelItem","_evaluateModelAttribute","newComponent","createChildModelComponent","modelItemFromAttribute","currentModel","setModel","oneModelObject","split","shift","RouterComponent","rootHtmlId","routeContentsHtmlId","routerModel","additionalModels","_routerModel","routes","currentPage","_calculateCurrentPage","pageHtmlId","window","set","_goToCurrentPage","routerConfig","route","location","hash","queryString","replace","regex","RegExp","results","exec","decodeURIComponent","defaultRoute","getCurrentPage","title","currentComponent"],"mappings":"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","file":"fronty.js","sourcesContent":["/*\n  fronty.js: Component-based front-end JavaScript library\n  author: lipido\n*/\n\n/** \n *  Class representing a component, which is an object whose responsibilities\n *  are:\n *  <ul>\n *    <li>Render the HTML results of a provided\n *    {@link Component#renderer|renderer function} inside a specified element of\n *   the showing document, making as less DOM changes as possible.</li>\n *    <li>Manage nested child components. Child components are components which\n *      render in an element inside this component. When <em>this</em> Component\n *      re-renders, it restores its child's subtrees on their places. Child Components\n *      can be added manually (See {@link Component#addChildComponent}) or created\n *      dynamically by <em>this</em> Component via \n *      \"fronty-component\" attribute or via custom tag elements \n *      (See {@link Component#createChildComponent} and {@link Component#childTags}).</li>\n *    <li>Manage event listeners, restoring them each re-rendering.</li>\n *  </ul>\n *  <p>Components render when you call {@link Component#start|start()}, \n * and update each time you call the {@link Component#render|render()}\n * function.</p>\n *\n * @example\n * <!-- html page -->\n * <body>\n *  <div id=\"mycomponent\"></div>\n * </body>\n *\n * @example\n * //Javascript\n * var counter = 1;\n * var component = new Component(\n *  () => '<div>Counter: <span>'+counter+'</span></div>', // renderer function\n *  'mycomponent' // HTML element id\n *  );\n * component.start(); // first render\n * setInterval(() => {\n *    counter++; \n *    component.render(); // component re-render\n * }, 1000);\n */\nclass Component {\n\n\n  /**\n   * Creates a new Component.\n   *\n   * @constructor\n   * @param {Function} renderer A non-parameter function that returns HTML.\n   * @param {String} htmlNodeId The id of the HTML element where this Component should \n   *                              render to.\n   * @param {Array.<String>} [childTags] An optional Array of strings of custom-tags for\n   *                         dynamically created child Components \n   *                        (See {@link Component#createChildComponent}).\n   */\n  constructor(renderer, htmlNodeId, childTags) {\n\n    /**\n     * The renderer function.\n     *\n     * @name Component#renderer\n     * @type Function\n     * @callback\n     * @return {String} HTML content. It <strong>must</strong> return a single root element.\n     * @default null\n     */\n    this.renderer = renderer;\n\n    /**\n     * The HTML element id where it renders into.\n     * @name Component#htmlNodeId\n     * @type String\n     * @default null\n     */\n    this.htmlNodeId = htmlNodeId;\n\n    /**\n     * The optional name of custom element tags where child Components will\n     * be created dynamically.<br>\n     *\n     * During render, if in the HTML provided by the {@link Component#renderer|renderer function}\n     * one of these tags is found, the {@link Component#createChildComponent|createChildComponent()}\n     * function is called.\n     *\n     * @name Component#childTags\n     * @type String\n     * @default empty array\n     */\n    this.childTags = (childTags) ? childTags : [];\n\n    this._childTagsCanonical = this.childTags.map((tag) => tag.toUpperCase());\n\n    // do not render until the component is started with start()\n    /**\n     * Whether this Component is stopped.<br>\n     * \n     * Stopped Components do not render.\n     *\n     * @name Component#stopped\n     * @type Boolean\n     * @default true\n     */\n    this.stopped = true;\n\n    /**\n     * The event listeners that this Component is managing. \n     * See {@link Component#addEventListener|addEventListener()}.\n     *\n     * @name Component#eventListeners\n     * @type {Object.<string, {callback: Function, eventType: String}>}\n     */\n    this.eventListeners = [];\n\n    /**\n     * The array of child components.\n     *\n     * @name Component#childComponents\n     * @type Array.<Component>\n     */\n    this.childComponents = [];\n\n    /**\n     * The child components, arranged by their HTML element id.\n     *\n     * @name Component#childComponentIds\n     * @type Object.<string, Component>\n     */\n    this.childComponentIds = {};\n\n    /////// \"private\" members\n\n    // The global event listener placed on the root element of this Component\n    this._boundEventsListener = this._eventsListener.bind(this);\n\n    // The DOM tree of this component as it was in the previous render.\n    // We will not compare the new rendered trees coming from the renderer function\n    // to the real DOM. Why? We want that third-party libraries could do some changes\n    // in the real DOM so, if it is not necessary, we will try not to overwrite their \n    // changes. To achieve this, we keep a \"virtual DOM\" that may not be\n    // exactly the real DOM, so we only change things that are under our control,\n    // things that we added in the previous render.\n    this._previousVirtualDOM = null;\n\n    // Elements where fronty-component attribute is found\n    this._nodesWithFrontyComponentAttribute = [];\n\n    // Elements where fronty-component attribute is found\n    this._nodesWithCustomTag = [];\n\n    // An object for parsing HTML into DOM (classic root.innerHTML=htmlstring)\n    // We delegate on a \"parsing service\" object in order to allow the\n    // accumulation of multiple parsing requests and call \"innerHTML = ...\" once,\n    // instead of multiple times, which is faster.\n    this._parsingService = Component._defaultParsingService;\n  }\n\n\n  /**\n   * Gets the HTML element's id where this Component should render.\n   *\n   * <p>This element will be replaced with the contents of this component\n   * renderer function.</p>\n   *\n   * @returns {String} The HTML node id where this Component is rendered.\n   */\n  getHtmlNodeId() {\n    return this.htmlNodeId;\n  }\n\n  /**\n   * Sets the HTML element id where this Component should render in the next\n   * rendering.\n   *\n   * <p>The element will be replaced with the contents of this component\n   * renderer function.</p>\n   *\n   * @param {String} htmlNodeId The HTML node id where this Component will\n   *                            be rendered.\n   */\n  setHtmlNodeId(htmlNodeId) {\n    this.htmlNodeId = htmlNodeId;\n    this._resetVirtualDOM();\n  }\n\n  //// children management\n\n  /**\n   * Adds a child Component to this Component.\n   *\n   * <p>The HTML element where the child Component will render will not be re-rendered\n   * when <em>this</em> Component (the parent) is re-rendered.</p>\n   *\n   * <p>The child component will be started (and thus immediately rendered) or stopped \n   * if this Component is currently started or stopped, respectively.</p>\n   *\n   * @param {Component} component The child Component.\n   */\n  addChildComponent(component) {\n    this.childComponents.push(component);\n    this.childComponentIds[component.getHtmlNodeId()] = component;\n\n    if (this.stopped) {\n      component.stop();\n    } else {\n      component.start();\n    }\n  }\n\n  /**\n   * Creates a new child Component for a specified class name to be placed in a\n   * given HTML element. This method is intended to be overrided\n   * by subclasses.\n   *\n   * <p>Parent components define where to create new children via their rendered \n   * HTML in two ways:\n   * <ul>\n   * <li>Via <code>fronty-component</code> attribute. An element like\n   * <code>&lt;div fronty-component=\"ChildComponent\"&gt;&lt;/div&gt;</code>\n   * indicates that <code>ChildComponent</code> instances should be created and rendered\n   * on that element.</li>\n   *\n   * <li>Via custom HTML tag. These tags\n   * must be indicated in the constructor of the component. For example:\n   * <code>new Component(renderer, 'parentId', ['ChildComponent'])</code>,\n   * indicates that <code>ChildComponent</code> should be created\n   * and rendered into when elements with this tag name are found.\n   * <b>Note:</b> Remember that custom HTML tags do not work at any\n   * place. For example, as child of a <code>&lt;table&gt;</code> element.</li>\n   * </ul></p>\n   * <p>Everytime a new element indicating that a child should be created, this\n   * method is called to create the real instance.</p>\n   * \n   * <p><b>Note:</b> By default, this function uses <code>eval(''+className)</code>\n   * to create the instance. If you are packing your application and this library\n   * in different modules, eval may fail in finding the className. You must \n   * override the method to create the child.</p>\n   *\n   * @param {String} className The class name found in the HTML element\n   * @param {Node} element The HTML element where the new child will be placed\n   * @param {String} id The HTML id found in the tag.\n   * @return {Component} The new created child component.\n   * @see {@link Component#childTags}\n   */\n  createChildComponent(className, element, id) {\n    var constructorFunction = eval('' + className); //jshint ignore:line\n\n    if (constructorFunction instanceof Function) {\n      return new constructorFunction(id);\n    }\n  }\n\n  /**\n   * Removes a child Component from this Component.\n   *\n   * <p>After the child removal, <em>this</em> component will re-render.</p>\n   *\n   * @param {Component} component The child Component.\n   */\n  removeChildComponent(component) {\n    var index = this.childComponents.indexOf(component);\n\n    if (index != -1) {\n      this.childComponents[index].stop();\n      this.childComponents.splice(index, 1);\n      delete this.childComponentIds[component.getHtmlNodeId()];\n    }\n    this.render();\n  }\n\n  /**\n   * Gets the child Components of this Component.\n   *\n   * @returns {Array.<Component>} The child Components.\n   */\n  getChildComponents() {\n    return this.childComponents;\n  }\n\n  /**\n   * Gets the child Components arranged by id.\n   *\n   * @returns {Array.<String, Component>} The child Components arranged by id.\n   */\n  getChildComponentsById() {\n    return this.childComponentIds;\n  }\n\n  /**\n   * Gets a child Component given its HTML element id.\n   *\n   * @param {String} id The HTML element id.\n   * @returns {Component} The child Component.\n   */\n  getChildComponent(id) {\n    return this.childComponentIds[id];\n  }\n\n  //// rendering\n  /**\n   * Render this Component, which consists in:\n   * <ol>\n   * <li>Save the child Component DOM trees, because they may be moved to another place in the DOM.</li>\n   * <li>Call the {@link Component#renderer|renderer function}.</li>\n   * <li>Calculate the differences between the previous \"virtual\" DOM of this Component\n   * and the new \"virtual\" DOM provided by the renderer function, skipping those\n   * elements where child nodes are rendering.</li>\n   * <li>Patch the real DOM with the previously computed differences.</li>\n   * <li>Patch the previous \"virtual\" DOM with the previously computed differences,\n   * and save it as the next previous \"virtual\" DOM.</li>\n   * <li>Restore the child Components in their new places if they where moved to another\n   * part in the DOM.</li>\n   * <li>Restore event listeners in their corresponding elements, because \n   * some could be moved to another place in the DOM.</li>\n   * <li>Create child nodes if new elements with tag name in\n   * {@link Component#childTags} are found in the HTML.</li>\n   * </ol> \n   */\n  render() {\n\n    if (this.rendering === true) {\n      //avoid recursion\n      return;\n    }\n\n    if (this.stopped || !this.htmlNodeId || this._getComponentNode() === null) {\n      // if the component is stopped, there is no id to render o the document\n      // do not contains the id to render to\n      return;\n    }\n\n    this.rendering = true;\n\n    this.beforeRender(); //hook\n\n    let firstRender = this._previousVirtualDOM === null;\n\n    if (firstRender) {\n      // first render, the currentTree to compare against is the actual DOM element\n      // where we will render\n      let currentTree = this._getComponentNode();\n      // clean the destiny node\n      while (currentTree.firstChild) {\n        currentTree.removeChild(currentTree.firstChild);\n      }\n\n      this.buildFirstRenderTree((newTree) => {\n\n        this._previousVirtualDOM = document.createElement('div');\n        this._previousVirtualDOM.appendChild(newTree);\n\n        var clonedTree = this._cloneAndIndex(newTree);\n        currentTree.parentNode.replaceChild(clonedTree, currentTree);\n\n\n        // put the global event listener on the root of this component\n        this._updateEventListeners();\n\n        // create all children that may have appeared in the form of\n        // custom tag HTML elements, or elements with the \"fronty-component\"\n        // attribute.\n        this._createChildComponents();\n\n        this.afterRender(); //hook\n\n        this.rendering = false;\n      });\n    } else {\n      // re-render. Restore the previous tree\n      let currentTree = this._previousVirtualDOM.firstChild;\n\n      this.computePatches(currentTree, (patches) => {\n\n        // Apply patches for the previous DOM\n        TreeComparator.applyPatches(patches);\n\n\n        // Apply patches to the REAL DOM\n        // first, save child component subtrees\n        var savedChildNodes = this._saveChildNodes();\n\n        TreeComparator.applyPatches(patches, (patch) => {\n\n          // for the real DOM, we will not patch nodes that are currently rendered by child nodes\n          if (patch.toReplace.id && patch.replacement !== undefined && patch.replacement.id &&\n            patch.toReplace.id === patch.replacement.id && (this.childComponentIds[patch.toReplace.id] !== undefined)) {\n            return null;\n          }\n          // However, the patches contains nodes from the \"virtual\" DOM trees, not\n          // of the real DOM. We need no get the real nodes.\n          // Moreover, we will clone the nodes being inserted in the real DOM because\n          // we will reuse these patches to also patch our current virtual DOM so nodes\n          // cannot have two parents!\n          // To do these, we can use the patchMapping parameter of TreeComparator.applyPatches(),\n          // which allows us to change each being applied by another patch.\n\n          // toReplace will be the real DOM node. In our virtual DOM, each node\n          // has a reference to the real DOM node (see the next few lines).\n          patch.toReplace = this._resolveRealNode(patch.toReplace, savedChildNodes);\n\n          if (patch.mode === TreeComparator.PATCH_INSERT_NODE ||\n            patch.mode === TreeComparator.PATCH_APPEND_CHILD ||\n            patch.mode === TreeComparator.PATCH_REPLACE_NODE) {\n\n            // If we will insert new nodes, we will clone them as well as\n            // to add a reference from the cloned nodes (which will remain in our\n            // virtual DOM) to the corresponding clones (which will be inserted in the real DOM)\n            patch.replacement = this._cloneAndIndex(patch.replacement);\n\n          } else if (patch.mode === TreeComparator.PATCH_SWAP_NODES) {\n            // in swap-nodes mode, both are nodes to be found in the real DOM,\n            // so we search for the replacement in the real DOM\n            patch.replacement = this._resolveRealNode(patch.replacement, savedChildNodes);\n          }\n\n          return patch;\n        });\n        // restore child component subtrees\n        this._restoreChildNodes(savedChildNodes);\n\n        // create all children that may have appeared in the form of\n        // custom tag HTML elements, or elements with the \"fronty-component\"\n        // attribute.\n        this._createChildComponents();\n\n        this.afterRender(); //hook\n\n        this.rendering = false;\n      });\n    }\n  }\n\n  buildFirstRenderTree(callback) {\n    this.renderNewDOM((newTree) => {\n      // copy id attribute to the root element of this component.\n      // the component does not need to specify any id in its rendering function\n      // root element\n      if (newTree.nodeType === Node.ELEMENT_NODE) {\n        newTree.setAttribute('id', this.getHtmlNodeId());\n      }\n      callback(newTree);\n    });\n  }\n\n  computePatches(currentTree, callback) {\n    // call the render function\n    let patches = null;\n\n    this.renderNewDOM((newTree) => {\n      // copy id attribute to the root element of this component.\n      // the component does not need to specify any id in its rendering function\n      // root element\n      if (newTree.nodeType === Node.ELEMENT_NODE) {\n        newTree.setAttribute('id', this.getHtmlNodeId());\n      }\n\n      var patches = TreeComparator.diff(currentTree, newTree, (node1, node2) => {\n\n        // Child component nodes should only be compared at attribute level in the parent component\n        if (node1.id && node2.id && node1.id === node2.id && (this.childComponentIds[node1.id] !== undefined)) {\n          return TreeComparator.COMPARE_POLICY_ATTRIBUTES;\n        }\n\n        if (node1.id && (!node2.id || node2.id !== node1.id) && (this.childComponentIds[node1.id] !== undefined)) {\n          // we want to compare a child component slot with another element, do a complete\n          // replacement\n          return TreeComparator.COMPARE_POLICY_REPLACE;\n        }\n\n        // By default, do a regular comparison\n        return TreeComparator.COMPARE_POLICY_DIFF;\n      });\n      callback(patches);\n    });\n  }\n  // lifecycle management\n  /**\n   * Stops this Component and all of its children.<br>\n   *\n   * Stopped Components do not render. Once this Component \n   */\n  stop() {\n    if (this.stopped === false) {\n      this.stopped = true;\n\n      for (let i = 0; i < this.childComponents.length; i++) {\n        var child = this.childComponents[i];\n        child.stop();\n      }\n    }\n\n    this.onStop();\n  }\n\n  /**\n   * Starts this Component and all of its children.<br>\n   *\n   * A Component need to be started in order to render. If this Component\n   * was stopped, it will render. Once this Component has been started and\n   * rendered, the {@link Component#onStart|onStart()} hook is called.\n   */\n  start() {\n    if (this.stopped) {\n      this.stopped = false;\n\n      this._resetVirtualDOM();\n      this.render();\n\n      for (let i = 0; i < this.childComponents.length; i++) {\n        var child = this.childComponents[i];\n        child.start();\n      }\n    }\n    this.onStart();\n  }\n\n  // event-listener management\n  /**\n   * Adds an event listener to HTML element(s) inside this Component.<br>\n   *\n   * Listeners added to elements controlled by this Component should be added\n   * via this method, not directly to the HTML elements, because they can be\n   * removed during re-render. Listeners added with this method are always \n   * restored to the elements matching the selector query after rendering.\n   *\n   * @param {String} eventType The event type to be added to the elements.\n   * @param {String} nodesQuery A HTML selector query to find elements to\n   * attach the listener to.\n   * @param {Function} callback The callback function to dispatch the event.\n   */\n  addEventListener(eventType, nodesQuery, callback) { ///HOLA\n\n    this.eventListeners.push({\n      query: nodesQuery,\n      callback: callback,\n      eventType: eventType\n    });\n\n    var rootNode = this._getComponentNode();\n    if (rootNode !== null) {\n      this._getComponentNode().removeEventListener(eventType, this._boundEventsListener);\n      this._getComponentNode().addEventListener(eventType, this._boundEventsListener);\n    }\n  }\n\n  // Hooks\n\n  /**\n   * Hook function called by this Component before rendering. As a hook, it is\n   * intended to be overriden by subclasses.\n   */\n  beforeRender() { //hook\n  }\n\n  /**\n   * Hook function called by this Component after rendering. As a hook, it is\n   * intended to be overriden by subclasses.\n   */\n  afterRender() { //hook\n  }\n\n  /**\n   * Hook function called by this Component just after start. As a hook, it is\n   * intended to be overriden by subclasses.\n   */\n  onStart() { //hook\n  }\n\n  /**\n   * Hook function called by this Component just after stop. As a hook, it is\n   * intended to be overriden by subclasses.\n   */\n  onStop() { //hook\n  }\n\n  // \"private\" methods\n\n  /*\n   * Creates a new DOM tree from the renderer output. If the renderer output\n   * is a string, we will get the dom by using the this._parsingService.\n   * If it is a DOM tree, we do not anything.\n   */\n  renderNewDOM(callback) {\n\n    // call the render function\n    var htmlContents = this.renderer();\n\n\n    if (typeof htmlContents === 'string') {\n      // We need to parse\n\n      htmlContents = htmlContents.trim();\n      var correctedHtmlContents = htmlContents;\n      // construct the new tree given by the render function\n      // fix: for roots starting with TR, TD or TH, they cannot be direct\n      // childs of div, they must be inside of a table to parse them with \n      // innerHTML\n      if (htmlContents.match(/^<tr .*/i) !== null) {\n        // trees starting with TR\n        correctedHtmlContents = '<table><tbody>' + htmlContents + '</tbody></table>';\n      } else if (htmlContents.match(/^<t[dh] .*/i) !== null) {\n        // trees starting with TD or TH\n        correctedHtmlContents = '<table><tbody><tr>' + htmlContents + '</tr></tbody></table>';\n      }\n\n      let newTree = document.createElement('div');\n\n      this._parsingService.parse(correctedHtmlContents, (node) => {\n        if (htmlContents.match(/^<tr .*/i) !== null) {\n          newTree.appendChild(node.firstChild.firstChild);\n        } else if (htmlContents.match(/^<t[dh] .*/i) !== null) {\n          newTree.appendChild(node.firstChild.firstChild.firstChild);\n        } else {\n          newTree.appendChild(node);\n        }\n        if (newTree.childNodes.length > 1) {\n          throw 'Rendering function MUST return a tree with a single root element ' + newTree.innerHTML;\n        }\n\n        callback(newTree.firstChild);\n      });\n    } else {\n\n      // assume htmlContents is a real DOM\n      callback(htmlContents);\n    }\n  }\n\n  _resolveRealNode(node, savedChildNodes) {\n\n    // if the node has an id of a child node, we find it in the savedChildNodes, since the\n    // \"realNode\" pointer does not references the real node, since the\n    // child components have replaced it by their root node.\n    if (node.id !== undefined && this.childComponentIds[node.id] !== undefined) {\n      //return document.getElementById(node.id);\n      return savedChildNodes[node.id];\n    }\n\n    // use the reference from the node to its corresponding clone in the real DOM\n    let result = node.realNode;\n\n    // No realNode? try to find by id (this is needed for the first render, where the new root node\n    // has the id of the slot of the component)\n    if (result === null || result === undefined && node.id !== undefined) {\n      result = document.getElementById(node.id);\n    }\n\n    return result;\n  }\n\n  _resetVirtualDOM() {\n    this._previousVirtualDOM = null;\n    this._nodesWithFrontyComponentAttribute = [];\n    this._nodesWithCustomTag = [];\n  }\n\n  /*\n   * Restores the child subtrees in their corresponding slots.\n   */\n  _restoreChildNodes(savedChildNodes) {\n    //let savedChilds = Object.keys(savedChildNodes).length;\n    for (let i = 0; i < this.childComponents.length; i++) {\n      var childComponent = this.childComponents[i];\n      var childId = childComponent.getHtmlNodeId();\n      if (this._getChildNode(childId) !== null && savedChildNodes[childId] !== undefined) {\n        var currentComponentNode = this._getChildNode(childId);\n        if (savedChildNodes[childId] != currentComponentNode) {\n          currentComponentNode.parentNode.replaceChild(savedChildNodes[childId], currentComponentNode);\n        }\n        //childComponent.afterParentRender();\n      }\n\n    }\n  }\n\n  /*\n   * Creates and returns an index of child node ids to their current DOM element.\n   */\n  _saveChildNodes() {\n    var savedChildNodes = {};\n    for (let i = 0; i < this.childComponents.length; i++) {\n      var childComponent = this.childComponents[i];\n      var childId = childComponent.getHtmlNodeId();\n      if (this._getChildNode(childId) !== null) {\n        savedChildNodes[childId] = this._getChildNode(childId);\n      }\n    }\n\n    return savedChildNodes;\n  }\n\n  _getComponentNode() {\n    return document.getElementById(this.getHtmlNodeId());\n  }\n\n  _getChildNode(childId) {\n    return document.getElementById(childId);\n  }\n\n  /*\n   * Clones a DOM tree, while keeping references from original nodes to their\n   * corresponding clones. Moreover, it creates the _nodesWithFrontyComponentAttribute\n   * index.\n   */\n  _cloneAndIndex(root) {\n    let clone = root.cloneNode();\n    root.realNode = clone;\n    if (root.nodeType === Node.ELEMENT_NODE) {\n      if (root.hasAttribute('fronty-component')) {\n        root.componentClass = root.getAttribute('fronty-component');\n        this._nodesWithFrontyComponentAttribute.push(root);\n      } else {\n        let tagIndex = this._childTagsCanonical.indexOf(root.tagName.toUpperCase());\n        if (tagIndex !== -1) {\n          root.componentClass = this.childTags[tagIndex];\n          this._nodesWithCustomTag.push(root);\n        }\n      }\n      if (root.hasChildNodes()) {\n        for (let i = 0; i < root.childNodes.length; i++) {\n          clone.appendChild(this._cloneAndIndex(root.childNodes[i]));\n        }\n      }\n    }\n    return clone;\n  }\n\n  /*\n   * Creates child nodes dynamically.\n   * In addition, it also removes previously created child components whose slots\n   * are no longer available.\n   */\n  _createChildComponents() {\n\n    // create childs by tag\n    this._createDynamicChildComponents(this._nodesWithCustomTag);\n\n    // create childs by fronty-component attribute\n    this._createDynamicChildComponents(this._nodesWithFrontyComponentAttribute);\n  }\n\n  /*\n   * Creates components nodes dynamically for elements with the custom tag <ClassName ...>\n   * or fronty-component=\"ClassName\" attribute\n   */\n  _createDynamicChildComponents(nodes) {\n    let bufferedParsingService = new Component.BufferedParsingService();\n\n    bufferedParsingService.start();\n\n    for (let j = nodes.length - 1; j >= 0; j--) {\n      var node = nodes[j];\n      var nodeId = node.getAttribute('id');\n      var className = node.componentClass;\n\n      if (document.getElementById(nodeId) !== null) {\n        this._createOrUpdateChildComponent(className, node, nodeId, bufferedParsingService);\n      } else {\n        nodes.splice(j, 1);\n        let childComponent = this.getChildComponent(nodeId);\n        if (childComponent !== undefined) {\n          this.removeChildComponent(childComponent);\n        }\n      }\n    }\n\n    bufferedParsingService.finish();\n  }\n\n  _createOrUpdateChildComponent(className, node, nodeId, bufferedParsingService) {\n    // create component if there is no child component for this id yet\n    if (!this.getChildComponent(nodeId)) {\n      this._createAndAddChildComponent(className, node, nodeId, bufferedParsingService);\n    } else {\n      this.updateChildComponent(className, node, nodeId);\n    }\n  }\n\n  /**\n   * Called when the parent ir rendered. This method does nothing. It is \n   * intended to be overriden\n   * \n   */\n  updateChildComponent(className, node, nodeId) {\n\n  }\n\n  /* \n   * Instantiates and indexes a new child component dynamically.\n   */\n  _createAndAddChildComponent(className, element, id, parsingService) {\n    let component = this.createChildComponent(className, element, id);\n    if (component) {\n      component.setHtmlNodeId(id);\n      let prevParsingService = component._parsingService;\n      component._parsingService = parsingService;\n      this.addChildComponent(component);\n      component._parsingService = prevParsingService;\n\n    }\n  }\n\n  // event listeners \"private\" methods\n\n  // global event listener for this component. All events are dispatched first by\n  // this function. If the target of the event matches one of the listener's query\n  // indicated in {@link Component#addEventListener}, the\n  // event is redirected to the provided callback function.\n  _eventsListener(event) {\n    for (let i = 0; i < this.eventListeners.length; i++) {\n      let listener = this.eventListeners[i];\n      if (event.target.matches(listener.query) && listener.eventType === event.type) {\n        event.preventDefault();\n        listener.callback(event);\n        return;\n      }\n    }\n  }\n\n  // place the global event listener in the root of this component\n  _updateEventListeners() {\n    var rootNode = this._getComponentNode();\n    if (rootNode !== null) {\n      for (let i = 0; i < this.eventListeners.length; i++) {\n        let listener = this.eventListeners[i];\n        rootNode.removeEventListener(listener.eventType, this._boundEventsListener);\n        rootNode.addEventListener(listener.eventType, this._boundEventsListener);\n      }\n    }\n  }\n}\n\n// A simple parsing service that immediately parses the html content and\n// calls the callback with the results\nComponent.ParsingService = class ParsingService {\n  parse(htmlContents, callback) {\n    var elem = document.createElement('div');\n    elem.innerHTML = htmlContents;\n    callback(elem.firstChild);\n  }\n};\n\n// A parsing service that accumulates parsing requests with an associated callback\n// to pass the results when available. When the finish() method\n// is called, all html received previously is parsed in a row and the corresponding callbacks\n// are invoked.\nComponent.BufferedParsingService = class BufferedParsingService extends Component.ParsingService {\n  constructor() {\n    super();\n    this.currentHTML = '';\n    this.counter = 0;\n    this.callbacks = [];\n  }\n\n  start() {\n    this.counter = 0;\n    this.currentHTML = '';\n    this.callbacks = [];\n  }\n\n  finish() {\n    if (this.callbacks.length > 0) {\n      this.parsedTree = document.createElement('div');\n      this.parsedTree.innerHTML = this.currentHTML;\n\n      for (let i = 0; i < this.callbacks.length; i++) {\n        var callback = this.callbacks[i];\n        callback();\n      }\n    }\n  }\n\n  parse(html, callback) {\n    this.currentHTML += '<div>' + html + '</div>';\n    var currentCounter = this.counter;\n    this.callbacks.push(() => {\n      callback(this.parsedTree.childNodes[currentCounter].firstChild);\n    });\n    this.counter++;\n  }\n\n};\n\nComponent._defaultParsingService = new Component.ParsingService();\n\n\n/*********** DOM TREE DIFF & PATCH *******/\n/**\n * A class to do discover differences between two DOM trees, calculating a\n * <em>patch</em>, as well as to reconcile those differences by applying the\n * <em>patch</em>\n */\nclass TreeComparator {\n\n  /**\n   * Compute the difference between two DOM trees, giving their root nodes.<br>\n   *\n   * The resulting object is a <em>patch</em> object that can be used to \n   * keep the first given tree equivalent to the second given tree.<br>\n   *\n   * An optional function can be provided to control how different subtrees are\n   * compared. This function receives two nodes (node1, node2) and can return:\n   * <ul>\n   * <li>TreeComparator.COMPARE_POLICY_DIFF: The comparison should be done as normal.</li>\n   * <li>TreeComparator.COMPARE_POLICY_SKIP: The comparison should not go deeper.</li>\n   * <li>TreeComparator.COMPARE_POLICY_REPLACE: The node1 should be totally replaced by the node2,\n   * without going deeper</li>\n   * </ul>\n   * @param {Node} node1 The root element of the first tree to compare.\n   * @param {Node} node2 The root element of the second tree to compare.\n   * @param {Function} [comparePolicy] An (optional) callback function to be called\n   * before comparing subnodes.\n   */\n  static diff(node1, node2, comparePolicy) {\n    if (comparePolicy) {\n      var actionToDo = comparePolicy(node1, node2);\n      switch (actionToDo) {\n        case TreeComparator.COMPARE_POLICY_SKIP:\n          return [];\n          break; //jshint ignore:line\n        case TreeComparator.COMPARE_POLICY_ATTRIBUTES:\n          if (!TreeComparator._equalAttributes(node1, node2)) {\n            // if there are some differences in attributtes, add this patch also.\n            return [{\n              mode: TreeComparator.PATCH_SET_ATTRIBUTES,\n              toReplace: node1,\n              replacement: node2\n            }];\n          } else {\n            return [];\n          }\n          break;\n        case TreeComparator.COMPARE_POLICY_REPLACE:\n          return [{\n            mode: TreeComparator.PATCH_REPLACE_NODE,\n            toReplace: node1,\n            replacement: node2\n          }];\n          //case TreeComparator.COMPARE_POLICY_DIFF: do nothing, continue\n      }\n    }\n\n    var result = [];\n\n    if (node1 !== null && node1.tagName === node2.tagName && node1.nodeType === node2.nodeType) {\n      // equal tagName and nodeType, compare children...\n      if (node1.hasChildNodes() || node2.hasChildNodes()) {\n        TreeComparator._compareChildren(node1, node2, comparePolicy, result);\n      }\n    } else {\n      // different tagName, nodeType, complete replacement\n      return [{\n        mode: TreeComparator.PATCH_REPLACE_NODE,\n        toReplace: node1,\n        replacement: node2\n      }];\n    }\n\n    if (\n      (node1.nodeType === Node.TEXT_NODE || node1.nodeType === Node.COMMENT_NODE) &&\n      node1.nodeValue !== null &&\n      node2.nodeValue !== null &&\n      node1.nodeValue !== node2.nodeValue\n    ) {\n      // for text and comment nodes, we compare their nodeValue. Text nodes and\n      // comment nodes have no chidren, so we return immediately.\n      return [{\n        mode: TreeComparator.PATCH_SET_NODE_VALUE,\n        toReplace: node1,\n        replacement: node2\n      }];\n    }\n\n    if (!TreeComparator._equalAttributes(node1, node2)) {\n      // if there are some differences in attributtes, add this patch also.\n      result.push({\n        mode: TreeComparator.PATCH_SET_ATTRIBUTES,\n        toReplace: node1,\n        replacement: node2\n      });\n    }\n    return result;\n  }\n\n  static _compareChildren(node1, node2, comparePolicy, result) {\n\n    let child1pos = 0;\n    let child2pos = 0;\n    let insertions = 0;\n    let deletions = 0;\n\n    // create a copy-on-write array for node1.childNodes. We will keep track\n    // of the performed swap operations without modifying the original node1.childNodes\n    let node1ChildNodes = [];\n\n    let node1Keys = {\n      lastPos: 0\n    };\n    let node2Keys = {\n      lastPos: 0\n    };\n\n    while (child1pos < node1.childNodes.length && child2pos < node2.childNodes.length) {\n      let child1 = node1ChildNodes[child1pos] ? node1ChildNodes[child1pos] : node1.childNodes[child1pos];\n      let child2 = node2.childNodes[child2pos];\n\n      if (child1.nodeType === Node.ELEMENT_NODE && child2.nodeType === Node.ELEMENT_NODE) {\n        let key1 = child1.getAttribute('key'); // maybe null (no-key)\n        let key2 = child2.getAttribute('key'); // maybe null (no-key)\n\n        if (key1 !== key2) {\n\n          TreeComparator._buildChildrenKeyIndex(node1Keys, node1, child1pos, key2);\n          TreeComparator._buildChildrenKeyIndex(node2Keys, node2, child2pos, key1);\n\n          if ((node2Keys[key1] !== undefined) && (node1Keys[key2] !== undefined)) {\n\n            //both nodes are in the initial and final result, so we only need to swap them\n            result.push({\n              mode: TreeComparator.PATCH_SWAP_NODES,\n              toReplace: child1,\n              replacement: node1.childNodes[node1Keys[key2].pos]\n            });\n\n            // swap elements in the node1ChildNodes\n            var temp = node1ChildNodes[child1pos] ? node1ChildNodes[child1pos] : node1.childNodes[child1pos];\n            node1ChildNodes[child1pos] = node1ChildNodes[node1Keys[key2].pos] ? node1ChildNodes[node1Keys[key2].pos] : node1.childNodes[node1Keys[key2].pos];\n            node1ChildNodes[node1Keys[key2].pos] = temp;\n\n          } else {\n            //both nodes are NOT in the initial and final result\n\n            if (node1Keys[key2] === undefined && node2Keys[key1] === undefined) {\n              // the key element in new result is missing in the current tree and\n              // the current element in the current tree is also missing in the new result, so\n              // we can replace one by another\n              result.push({\n                mode: TreeComparator.PATCH_REPLACE_NODE,\n                toReplace: child1,\n                replacement: child2,\n              });\n              child1pos++;\n              child2pos++;\n            } else if (node1Keys[key2] === undefined) {\n              // if a key element in the new result is missing in the current tree, but the \n              // element in the new result is also present, we insert the new element maintaining\n              // the current element we are comparing against\n              result.push({\n                mode: TreeComparator.PATCH_INSERT_NODE,\n                toReplace: node1,\n                replacement: child2,\n                beforePos: child1pos + insertions - deletions\n              });\n              insertions++;\n              child2pos++;\n\n            } else {\n              // and if a key element in the current result is missing in the new result\n              // and the key element in the new result is also present in the current result, we will\n              // delete the current element\n              result.push({\n                mode: TreeComparator.PATCH_REMOVE_NODE,\n                toReplace: child1\n              });\n              child1pos++;\n              deletions++;\n            }\n          }\n\n        } else {\n          // both keys are equals (same key OR both null)\n          result.push.apply(result, TreeComparator.diff(\n            child1,\n            child2,\n            comparePolicy));\n\n          child1pos++;\n          child2pos++;\n        }\n      } else if (child1.nodeType !== Node.ELEMENT_NODE && child2.nodeType === Node.ELEMENT_NODE) {\n        // \"strange\" non-element nodes on current tree are removed\n        result.push({\n          mode: TreeComparator.PATCH_REMOVE_NODE,\n          toReplace: child1\n        });\n        child1pos++;\n        deletions++;\n      } else if (child1.nodeType === Node.ELEMENT_NODE && child2.nodeType !== Node.ELEMENT_NODE) {\n        // new non-element nodes on new tree are inserted\n        result.push({\n          mode: TreeComparator.PATCH_INSERT_NODE,\n          toReplace: node1,\n          replacement: child2,\n          beforePos: child1pos + insertions - deletions\n        });\n        insertions++;\n        child2pos++;\n\n      } else if (child1.nodeType !== Node.ELEMENT_NODE && child2.nodeType !== Node.ELEMENT_NODE) {\n        // both non-element nodes are compared\n        var partial =\n          TreeComparator.diff(\n            child1,\n            child2,\n            comparePolicy);\n        result.push.apply(result, partial);\n\n        child1pos++;\n        child2pos++;\n      }\n    }\n\n    if (child1pos < node1.childNodes.length) {\n      for (let i = child1pos; i < node1.childNodes.length; i++) {\n        result.push({\n          mode: TreeComparator.PATCH_REMOVE_NODE,\n          toReplace: node1.childNodes[i]\n        });\n      }\n    } else if (child2pos < node2.childNodes.length) {\n      for (let j = child2pos; j < node2.childNodes.length; j++) {\n        result.push({\n          mode: TreeComparator.PATCH_APPEND_CHILD,\n          toReplace: node1,\n          replacement: node2.childNodes[j]\n        });\n      }\n    }\n  }\n\n  static _swapArrayElements(arr, indexA, indexB) {\n    var temp = arr[indexA];\n    arr[indexA] = arr[indexB];\n    arr[indexB] = temp;\n  }\n\n  static _buildChildrenKeyIndex(currentIndex, node, start, untilFind) {\n    start = Math.max(start, currentIndex.lastPos);\n    let i = start;\n    for (; i < node.childNodes.length; i++) {\n      let child = node.childNodes[i];\n\n      if (child.nodeType === Node.ELEMENT_NODE) {\n        let key = child.getAttribute('key');\n        if (key) {\n          currentIndex[key] = {\n            node: child,\n            pos: i\n          };\n\n          if (key === untilFind) {\n            break;\n          }\n        }\n      }\n    }\n    currentIndex.lastPos = i;\n  }\n\n  static _equalAttributes(node1, node2) {\n\n    if (!node1.hasChildNodes() && !node2.hasChildNodes()) {\n      return node1.isEqualNode(node2);\n    }\n\n    if (node1.nodeType !== Node.ELEMENT_NODE || node2.nodeType !== Node.ELEMENT_NODE) {\n      return true;\n    }\n\n    if (node1.attributes.length === node2.attributes.length === 0) {\n      return true;\n    }\n\n    if (node1.attributes.length !== node2.attributes.length) {\n      return false;\n    }\n\n    for (let i = 0; i < node1.attributes.length; i++) {\n      if (node1.attributes[i].name != node2.attributes[i].name ||\n        node1.attributes[i].value != node2.attributes[i].value) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  static _swapElements(obj1, obj2) {\n    var temp = document.createElement(\"div\");\n    obj1.parentNode.insertBefore(temp, obj1);\n    obj2.parentNode.insertBefore(obj1, obj2);\n    temp.parentNode.insertBefore(obj2, temp);\n    temp.parentNode.removeChild(temp);\n  }\n\n  /**\n   * Applies the patches to the current DOM.\n   *\n   * @param patches Patches previously computed with {@link TreeComparator.diff}\n   */\n  static applyPatches(patches, patchMapping) {\n    for (let i = 0; i < patches.length; i++) {\n      var patch = patches[i];\n      if (patchMapping !== undefined) {\n        patch = patchMapping(patch);\n        if (patch === null) {\n          continue;\n        }\n      }\n      // HTML nodes\n\n      switch (patch.mode) {\n        case TreeComparator.PATCH_SET_ATTRIBUTES:\n          var toReplace = patch.toReplace;\n          var replacement = patch.replacement;\n          var attribute = null;\n          for (let i = 0; i < replacement.attributes.length; i++) {\n            attribute = replacement.attributes[i];\n            if (attribute.name === 'value' &&\n              toReplace.value != attribute.value) {\n              toReplace.value = attribute.value;\n            } else if (attribute.name === 'checked') {\n              toReplace.checked =\n                (attribute.checked !== false) ? true : false;\n            }\n            if (!toReplace.hasAttribute(attribute.name) || toReplace.getAttribute(attribute.name) !== attribute.value) {\n              toReplace.setAttribute(attribute.name, attribute.value);\n            }\n          }\n\n          for (let j = toReplace.attributes.length - 1; j >= 0; j--) {\n            attribute = patch.toReplace.attributes[j];\n            if (!replacement.hasAttribute(attribute.name)) {\n              if (attribute.name === 'checked') {\n                toReplace.checked = false;\n              }\n              toReplace.removeAttribute(attribute.name);\n            }\n          }\n          break;\n        case TreeComparator.PATCH_SET_NODE_VALUE:\n          patch.toReplace.nodeValue = patch.replacement.nodeValue;\n          break;\n        case TreeComparator.PATCH_REMOVE_NODE:\n          patch.toReplace.parentNode.removeChild(patch.toReplace);\n          break;\n        case TreeComparator.PATCH_APPEND_CHILD:\n          patch.toReplace.appendChild(patch.replacement);\n          break;\n        case TreeComparator.PATCH_INSERT_NODE:\n          if (!patch.toReplace.hasChildNodes()) {\n            patch.toReplace.appendChild(patch.replacement);\n          } else {\n            patch.toReplace.insertBefore(patch.replacement, patch.toReplace.childNodes[patch.beforePos]);\n          }\n          break;\n        case TreeComparator.PATCH_SWAP_NODES:\n          TreeComparator._swapElements(patch.toReplace, patch.replacement);\n          break;\n        case TreeComparator.PATCH_REPLACE_NODE:\n          patch.toReplace.parentNode.replaceChild(patch.replacement, patch.toReplace);\n          break;\n      }\n    }\n  }\n}\nTreeComparator.PATCH_INSERT_NODE = 0;\nTreeComparator.PATCH_REMOVE_NODE = 1;\nTreeComparator.PATCH_SWAP_NODES = 2;\nTreeComparator.PATCH_APPEND_CHILD = 3;\nTreeComparator.PATCH_REPLACE_NODE = 4;\nTreeComparator.PATCH_SET_NODE_VALUE = 5;\nTreeComparator.PATCH_SET_ATTRIBUTES = 6;\n\nTreeComparator.COMPARE_POLICY_SKIP = 0;\nTreeComparator.COMPARE_POLICY_REPLACE = 1;\nTreeComparator.COMPARE_POLICY_DIFF = 2;\nTreeComparator.COMPARE_POLICY_ATTRIBUTES = 3;\n/**\n * A Model is a general-purpose, observable object, holding user specific data.\n *\n *  The object can receive <em>observer functions</em> (via \n * {@link Model#addObserver|addObserver()} function), which will be notified\n *  when the {@link Model#set|set( callback )} method of this object is called.\n *\n */\nclass Model {\n\n  /**\n   * Creates an instance of a Model.\n   *\n   * @param {String} [name=--unnamed model--] A name for the model\n   */\n  constructor(name) {\n    /**\n     * The set of observer functions to be called when this Model is changed\n     * via {@link Model#set|set()} method.\n     */\n    this.observers = [];\n\n    /**\n     * The name of the model.\n     * @type {String}\n     */\n    this.name = name ? name : '--unnamed model--';\n  }\n\n  /**\n   * Method to update the this Model.<br>\n   * A callback function is passed which is, typically, in charge to make changes \n   * in this object. When this callback returns, observers of this Model are\n   * notified.\n   * @example\n   *  Model m = new Model('mymodel');\n   *  m.set( () => { m.itemName='Tablet'; m.price=1200});\n   * \n   * @param {Function} update The callback function in charge of changing this \n   *        Model. The function will receive the reference to this Model as \n   *        parameter.\n   * @param {Object} [hint] Any additional object to be passed to\n   *         {@link Model#observers|observers} during notification.\n   */\n  set(update, hint) {\n    update(this);\n    this.notifyObservers(hint);\n  }\n\n  /**\n   * Invokes all {@link Model#observers|observers}.\n   *\n   * @param {Object} [hint] An optional object to pass as argument to observers.\n   */\n  notifyObservers(hint) {\n    for (let i = 0; i < this.observers.length; i++) {\n      let observer = this.observers[i];\n      observer(this, hint);\n    }\n  }\n\n  /**\n   * Adds an observer function to this Model.<br>\n   * \n   * @param {Function} observer The observer to add.\n   * @see {@link Model#observers}\n   */\n  addObserver(observer) {\n    this.observers.push(observer);\n    //console.log('Model [' + this.name + ']: added observer, total: ' + this.observers.length);\n  }\n\n  /**\n   * Removes an observer function from this Model.<br>\n   *\n   * The function will no longer be notified of changes in this Model.\n   *\n   * @param {Function} observer The observer to be removed.\n   */\n  removeObserver(observer) {\n    if (this.observers.indexOf(observer) != -1) {\n      this.observers.splice(this.observers.indexOf(observer), 1);\n      //console.log('Model [' + this.name + ']: removed observer, total: ' + this.observers.length);\n    }\n  }\n}\n\n\n/** \n * Class representing a model-based Component.<br>\n *\n * A ModelComponent is a Component which <em>auto-renders</em> itself when a\n * given {@link Model|model} object changes. This model object is also passed to this\n * Component's {@link Component#renderer|renderer function} each time this\n * Component is rendered.\n *\n * @example\n * <!-- html page -->\n * <body>\n *  <div id=\"mycomponent\"></div>\n * </body>\n *\n * @example\n * // Javascript\n * // Model\n * var model = new Model();\n * model.counter = 0;\n *\n * // The ModelComponent to render the Model\n * var component = new ModelComponent(\n *  (m) => '<div>Counter: <span>'+m.counter+'</span></div>', // renderer function\n *  model, //the model\n *  'mycomponent' // HTML element id\n *  );\n *\n * component.start(); // first render\n *\n * // Make changes in Model to fire re-renders\n * setInterval(() => {\n *    model.set( () => model.counter++); // model update -> automatic re-render!\n * }, 1000);\n * @extends Component\n */\nclass ModelComponent extends Component {\n\n  /**\n   * Creates a new ModelComponent.\n   *\n   * @param {Function} modelRenderer A renderer function which accepts a\n   * {@link Model} as argument.\n   * @param {Model} model The default model. You can add more models with {@link ModelComponent#addModel}.\n   * @param {String} htmlNodeId The id of the HTML element where this Component should \n   *                              render to.\n   * @param {Array.<String>} [childTags] An optional Array of strings of custom-tags for dynamically created child Components.\n   */\n  constructor(modelRenderer, model, htmlNodeId, childTags) {\n    super(\n      // the renderer function wraps the modelRenderer function in order to\n      // pass the model to the modelRenderer.\n      () => {\n        return modelRenderer(this._mergeModelInOneObject());\n      },\n      htmlNodeId, childTags\n    );\n\n    this.models = {};\n\n    if (model !== null && model !== undefined) {\n      this.models['default'] = model;\n    }\n\n    this.updater = this.update.bind(this); // the update function bound to this\n  }\n\n  /**\n   * Adds a secondary model to this model component.\n   *\n   * <p>ModelComponents can have more than one model. The model passed in the\n   * constructor is the 'default' model. Additional models must have a name.\n   * When the modelRenderer function is called, the passed object to the function\n   * will contain the 'default' model itself and all the additional models under \n   * their respective names. For example, a code like:</p>\n   * <pre><code>\n   * var myModel = new Fronty.Model();\n   * myModel.value = 'foo';\n   * var mySecondaryModel = new Fronty.Model();\n   * mySecondaryModel.value = 'bar';\n   * var myModelComponent = new Fronty.ModelComponent(..., myModel, ...);\n   * myModelComponent.addModel('secondary', mySecondaryModel);\n   * </code></pre>\n   * will pass the following object to the model renderer function:\n   * <pre>\n   * <code>\n   * {\n   *    value: 'foo',\n   *    secondary: {\n   *        value: 'bar'\n   *    }\n   * }\n   * </code></pre>\n   * @param {String} modelName The name for the additional model\n   * @param {Model} model The additonal model\n   */\n  addModel(modelName, model) {\n    this.models[modelName] = model;\n  }\n\n  /**\n   * The observer function added to all models this ModelComponent manages.<br>\n   * This function simply calls {@link ModelComponent#render|render}, but\n   * you can override it.\n   *\n   * @param {Model} model The model that has been updated.\n   */\n  update(model) {\n    //console.log('Component [#' + this.htmlNodeId + ']: received update from Model [' + model.name + ']');\n    this.render();\n  }\n\n  // lifecycle management\n  stop() {\n\n    if (this.stopped === false) {\n      for (let modelName in this.models) {\n        if (this.models.hasOwnProperty(modelName)) {\n          this.models[modelName].removeObserver(this.updater);\n        }\n      }\n    }\n    super.stop();\n  }\n\n  start() {\n\n    if (this.stopped) {\n      for (let modelName in this.models) {\n        if (this.models.hasOwnProperty(modelName)) {\n          this.models[modelName].addObserver(this.updater);\n        }\n      }\n    }\n    super.start();\n  }\n\n  /**\n   * Sets the model for this ModelComponent.\n   *\n   * <p>The component will be re-rendered</p>\n   *\n   * @param {Model|Array<Model>} model The model(s) to be set.\n   */\n  setModel(model, modelName = 'default') {\n    this.models[modelName].removeObserver(this.updater);\n    this.models[modelName] = model;\n    this.models[modelName].addObserver(this.updater);\n    this.render();\n  }\n\n  _mergeModelInOneObject() {\n    if (Object.keys(this.models).length === 1) {\n      return this.models['default'];\n    }\n    var context = {};\n    let modelNames = Object.keys(this.models);\n    for (let i = 0; i < modelNames.length; i++) {\n      let modelName = modelNames[i];\n      if (modelName === 'default') {\n        context = Object.assign(context, this.models['default']);\n      } else {\n        context[modelName] = this.models[modelName];\n      }\n    }\n    return context;\n  }\n\n\n\n  /** \n   * Overrides the child Component creation by also considering a \"model\"\n   * attribute in the tag.<br>\n   * The model attribute is used as a path inside the model object and calls \n   * {@link ModelComponent#createChildModelComponent}.\n   * @example\n   * <!-- How to add a model attribute in the HTML child tag -->\n   * <childcomponent id=\"child-0\" model=\"items[0]\">\n   *\n   * @param {String} tagName The HTML tag name used to place the new child Component\n   * in the parent HTML\n   * @param {Node} childTagElement The HTML element where the new Child will be placed\n   * @param {String} id The HTML id found in the tag.\n   * @return {Component} The new created child Component.\n   * @see {@link Component#childTags}\n   */\n  createChildComponent(className, element, id) {\n    let modelAtt = element.getAttribute('model');\n\n    let modelItem = this._evaluateModelAttribute(modelAtt);\n\n    let newComponent = this.createChildModelComponent(className, element, id, modelItem);\n\n    newComponent.modelItemFromAttribute = modelItem;\n\n    return newComponent;\n  }\n\n  updateChildComponent(className, element, nodeId) {\n    let component = this.getChildComponent(nodeId);\n    let currentModel = component.modelItemFromAttribute;\n    let modelAtt = element.getAttribute('model');\n    let modelItem = this._evaluateModelAttribute(modelAtt);\n    if (currentModel !== modelItem) {\n      component.setModel(modelItem);\n      component.modelItemFromAttribute = modelItem;\n    }\n  }\n\n  /**\n   * This method searches for a class with the name of the className parameter\n   * with a constructor taking two attributes: id and model.<br>\n   * If you have components with different constructors or this policy does not\n   * adapt to your needs, you can override this method.\n   *\n   * @param {String} className The class name found in the element\n   * @param {Node} element The HTML element where the new child will be placed\n   * @param {String} id The HTML id found in the element.\n   * @param {Object} modelItem a model object for the new Component.\n   * @return {Component} The new created child component.\n   */\n  createChildModelComponent(className, element, id, modelItem) {\n    var constructorFunction = eval('' + className); //jshint ignore:line\n\n    if (constructorFunction instanceof Function) {\n      return new constructorFunction(id, modelItem);\n    }\n  }\n\n  // \"private\"\n\n  _evaluateModelAttribute(modelAtt) {\n    let oneModelObject = this._mergeModelInOneObject();\n    let modelItem = null;\n    if (modelAtt.indexOf('(') === -1) {\n      // for simple expressions, do not use eval (slower)\n      // navigate the object graph manually\n      modelItem = oneModelObject;\n      let arr = modelAtt.split(/[.\\[\\]]/);\n      while (arr.length) {\n        let elem = arr.shift();\n        if (elem.length !== 0) {\n          modelItem = modelItem[elem];\n        }\n      }\n\n    } else {\n      // complex including (), use eval\n      modelItem = eval('oneModelObject.' + modelAtt); //jshint ignore:line\n    }\n    return modelItem;\n  }\n}\n\n/**\n *  Class representing a router component.<br>\n *  \n *  A router is reponsible of parsing the current browser location \n *  mapping its current hash to \"pages\". Each time the location is\n *  changed, the router tries to replace the inner HTML in a given html node id\n *  element.Pages are:\n * <ol>\n *    <li>A Component, which will render the page contents.</li>\n *    <li>Some other options, such as title.</li>\n *  </ol>\n *  You have to define your by calling {@link RouterComponent#setRouterConfig}.<br>\n *  Finally, calling start() will try to go to the page indicated by the hash, rendering\n *  its contents.<br>\n *  The RouterComponent is a {@link ModelComponent} because it has an own Model\n *  containing the \"currentPage\" property.\n *\n * @example\n * var router = new RouterComponent(\n *      // id of the HTML element where router renders.\n *      'router', \n *      //HTML of the router.\n *      () => \"<div id='router'><div id='maincontent'></div></div>\", \n *      // id inside the router where the current page component renders.\n *      'maincontent'); \n * router.setRouterConfig(\n * {    \n *    login: { //rendered on http://<host>/<page>.html#login\n *      component: new LoginComponent(), // LoginComponent is a Component\n *      title: 'Login'\n *    },\n *    // more pages\n *    defaultRoute: 'login'\n * });\n * router.start();\n *\n * @extends ModelComponent\n */\nclass RouterComponent extends ModelComponent {\n\n  /**\n   * Creates a new router.<br>\n   * \n   * @param {String} rootHtmlId The HTML element id where the router renders.\n   * @param {Function} modelRenderer the model renderer function\n   * @param {String} routeContentsHtmlId The HTML element id where the different views of the router are placed\n   * @param {Model} model The model\n   */\n  constructor(rootHtmlId, modelRenderer, routeContentsHtmlId, model) {\n\n    // add a routerModel to the given model(s), creating an array\n    var routerModel = new Model('RouterModel');\n\n    var additionalModels = {};\n    if (model !== null && model !== undefined) {\n      model = model;\n    } else {\n      model = new Model('empty-model');\n    }\n\n\n    super(modelRenderer, model, rootHtmlId, []);\n\n    super.addModel('router', routerModel);\n\n    this._routerModel = routerModel;\n    this.routes = {};\n\n    this._routerModel.currentPage = this._calculateCurrentPage();\n\n    this.pageHtmlId = routeContentsHtmlId;\n\n    window.addEventListener('hashchange', () => {\n      //console.log(\"Router: page changed\");\n      this._routerModel.set(() => {\n        this._routerModel.currentPage = this._calculateCurrentPage();\n      });\n    });\n  }\n\n  /**\n   * This function overrides the {@link ModelComponent#update}, by also \n   * checking if the model being changed is this RouterComponent's model. In\n   * such a case, the RouterComponent goes to the page the model indicates.\n   *\n   * @param {Model} model The model that has been updated.\n   */\n  update(model) {\n    super.update(model);\n    if (model == this._routerModel) {\n      this._goToCurrentPage();\n    }\n  }\n\n  /**\n   * Sets the router configuration. This configuration basically maps\n   * URL hashes to Components that should be showed.\n   *\n   * @param {Object.<String, {component: Component, title: String}>}\n   * routerConfig Mapping of URL hashes to pages.\n   * \n   * @example\n   * router.setRouterConfig(\n   * {    \n   *    login: { //rendered on http://<host>/<page>.html#login\n   *      component: new LoginComponent(), // LoginComponent is a Component\n   *      title: 'Login'\n   *    },\n   *    // more pages\n   *    defaultRoute: 'login'\n   * });\n   */\n  setRouterConfig(routerConfig) {\n    this.routes = routerConfig;\n    this._routerModel.currentPage = this._calculateCurrentPage();\n  }\n\n  onStart() {\n    this._goToCurrentPage();\n  }\n\n  /**\n   * Displays to an specified page. Pages are defined in \n   * {@link RouterComponent#setRouterConfig}\n   *\n   * @param {String} route The route to go. Example: 'login'\n   */\n  goToPage(route) {\n    window.location.hash = '#' + route;\n  }\n\n  /**\n   * Gets the current page being shown.\n   * @return {String} The current page.\n   */\n  getCurrentPage() {\n    return this._routerModel.currentPage;\n  }\n\n  /**\n   * Gets this the model of this router.<br>\n   *\n   * The router contains an internal model where the current page is stored \n   * (among those models provided in the constructor). You can obtain this\n   * internal model by calling this function.\n   *\n   * @return {Model} The model of this router.\n   */\n  getRouterModel() {\n    return this._routerModel;\n  }\n\n  /**\n   * Gets a query parameter of the current route.<br>\n   *\n   * Note: <em>route query parameters</em> are NOT the standard URL query\n   * parameters, which are specified BEFORE the hash.<br>\n   *\n   * For example, if the current URL is 'index.html#login?q=1',\n   * a call to getRouteQueryParam('q') returns 1.\n   *\n   * @param {String} name The name of the route query parameter.\n   * @return The value of the router query parameter.\n   */\n  getRouteQueryParam(name) {\n    var queryString = window.location.hash.replace(/#[^\\?]*(\\?.*)/, \"$1\");\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n      results = regex.exec(queryString);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n  }\n\n  _calculateCurrentPage() {\n    var currentPage = window.location.hash.replace(/#([^\\\\?]*).*/, \"$1\");\n    if (currentPage.length === 0 && this.routes.defaultRoute) {\n      currentPage = this.routes.defaultRoute;\n    }\n    return currentPage;\n\n  }\n  _goToCurrentPage() {\n    var currentPage = this.getCurrentPage();\n\n    if (currentPage) {\n\n      // get page component and update the main body element\n      if (this.routes[currentPage] !== undefined) {\n        if (this.routes[currentPage].title) {\n          document.title = this.routes[currentPage].title;\n        }\n\n        // stop the previous component\n        if (this.currentComponent) {\n          this.currentComponent.stop();\n        }\n        this.removeChildComponent(this.currentComponent);\n\n        // start the new page's component\n        this.currentComponent = this.routes[currentPage].component;\n        this.currentComponent.setHtmlNodeId(this.pageHtmlId);\n\n        this.addChildComponent(this.currentComponent);\n        //this.routes[currentPage].component.start();\n\n      } else {\n        //console.log('Router undefined page ' + currentPage);\n      }\n    } else {\n      //console.log('Router: no default page defined');\n    }\n  }\n}\n\nexport {\n  Model,\n  ModelComponent,\n  Component,\n  RouterComponent,\n  TreeComparator\n};\n"]}